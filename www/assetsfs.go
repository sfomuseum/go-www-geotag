// Code generated by go-bindata.
// sources:
// static/javascript/geotag.init.js
// static/javascript/geotag.maps.js
// static/css/index.css
// DO NOT EDIT!

package www

import (
	"github.com/whosonfirst/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticJavascriptGeotagInitJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xd1\x4f\xdb\x30\x10\xc6\x9f\x93\xbf\xe2\xe6\x17\x52\xa9\x0d\xef\x54\x7d\x60\x12\xd2\x90\x40\x9a\xa6\xb1\x17\x84\xa2\x6b\x7d\xa4\x16\x8e\x1d\xd9\x17\xba\x82\xf8\xdf\x27\x27\x71\x08\x65\x5d\xd6\x17\x44\x92\xef\x7e\xf7\xdd\xd5\x9f\x77\xca\x48\xbb\xcb\x51\xca\xab\x67\x32\x7c\xa3\x3c\x93\x21\x97\x09\x6d\x51\x8a\x39\x3c\x36\x66\xc3\xca\x1a\x08\xcf\x19\x05\xcd\xec\x35\x4d\x01\x00\x9e\xd1\x01\xd6\xaa\x78\xa2\x3d\xac\x40\xda\x4d\x53\x91\xe1\x7c\x6d\xe5\x3e\x2f\x89\x2f\x99\x9d\x5a\x37\x4c\x99\x90\xc8\xb8\x30\xf4\x9b\x5f\xc8\x2c\xb0\x56\x8b\x27\xda\x8b\xd9\x72\xa0\x78\xde\x6b\x2a\x1a\xa7\x4f\xe1\xb4\x45\x8b\xc6\xe9\x31\x89\xd5\xe9\xa0\x50\xd3\x73\x02\xa6\x1b\x4e\x3d\x42\xf6\x25\x8e\x37\x7b\x4d\x93\x8d\x35\xde\x6a\xca\xb5\x2d\x33\x71\xab\xbc\x57\xa6\x84\xcb\xef\xd7\xd0\xcf\x92\x38\xe2\xc6\x99\xce\xca\x5b\xfb\x77\x04\x1a\x26\x3c\x8a\x6a\x15\x70\xf7\xe3\x66\x1a\x16\x87\x3c\xca\x0a\x82\x29\x54\xd8\x96\x32\x8a\x0b\x8d\xfc\x3f\xdb\x0a\x5a\x85\x7a\xa1\x91\x15\x37\x92\x02\x7b\xe4\x29\xa2\x8e\x7a\xea\xeb\x61\x5c\x3f\xed\xcd\x9a\x93\xbc\x59\x53\x1e\x37\x67\xcd\xb4\xb9\x31\x60\xd2\xdd\x8b\xb5\xd5\x29\xf6\x82\xfe\x2f\x87\x6c\x60\x4d\xda\xeb\x01\xff\x74\x56\x61\x5d\xd0\x87\xf3\x5f\x12\x5f\x69\x0a\xff\x7e\xdd\x5f\xcb\x4c\x54\x58\x1f\xec\xa7\xab\x39\xda\xbe\xc2\x1a\xa8\x23\x88\xd9\x32\x39\x6c\xff\xa1\x35\xba\xd2\xc3\x0a\x5e\xd3\x44\xf4\xe1\x11\x17\x31\x46\xf3\x34\x11\x43\x10\xc4\xc5\x7b\x28\xc2\x87\x78\xa8\xc5\xc5\x70\xbe\xe7\x5d\x83\xde\xea\xf9\x39\xec\x08\x0c\x91\x04\xb6\x20\x2d\xf0\x56\x79\x28\xd6\xf4\x68\x1d\x15\xf0\x13\x4d\xe9\xb0\x02\xcf\xe8\xd8\x03\xbb\x7d\x9b\x04\x0b\xd2\xe1\x2e\x68\x4d\xe9\x23\xa7\x9b\x37\x6f\xfb\xe7\x52\xf9\x5a\x63\xb8\xc2\xc4\x5a\xdb\xcd\x93\x58\x7e\x5a\x28\xac\xa0\x24\xcb\x58\xe6\x15\xd6\x3e\x2c\xf4\x16\xeb\xac\xa3\xcc\x87\xb1\x3f\xed\xf4\xd3\x42\xef\x0c\xae\x35\x05\x53\xca\x78\x46\xc3\x0a\x99\xa0\xff\x3d\x8e\x6d\x75\x8b\x7e\x0b\x2b\x30\xb4\x83\x9b\xfc\x1b\xfa\x6d\x68\x1c\x7b\x45\x41\xe1\xd9\xc1\x0a\xb4\xdd\x60\xb8\xad\xf3\xf0\x6e\x64\x27\x4a\xc2\xd5\x9d\x84\x9a\x1a\x9d\x27\x79\x30\x57\xfb\xb2\xed\x30\xe8\x97\x69\x9a\x04\x40\xa7\x0f\x03\xb5\xc8\xf7\x7b\xa3\xfb\x70\x7f\x16\x63\x7d\xf6\xb0\x1c\x6b\xda\xfc\x0e\x9a\x98\xae\x8f\xa2\x3e\x46\x51\x15\x1e\x5b\xc1\xdb\xe1\xf1\xae\xb0\xce\x3d\xf1\x2f\x45\xbb\xec\x3e\x7a\x98\x0f\x9d\x1e\xe6\xa3\x28\x75\x29\x7b\x9b\x2d\xd3\x3f\x01\x00\x00\xff\xff\xf6\x72\xb0\xae\xe2\x06\x00\x00")

func staticJavascriptGeotagInitJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptGeotagInitJs,
		"static/javascript/geotag.init.js",
	)
}

func staticJavascriptGeotagInitJs() (*asset, error) {
	bytes, err := staticJavascriptGeotagInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/geotag.init.js", size: 1762, mode: os.FileMode(420), modTime: time.Unix(1586211157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptGeotagMapsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdd\x8e\xdb\x36\x13\xbd\x96\x9e\x62\xa2\x0f\xf8\x24\x05\x86\x94\x4d\x51\xa0\x90\xa3\x00\x69\x81\xa2\x01\xb6\x59\x60\x9b\xbd\x5a\x18\x06\x2d\x8d\x25\x35\x14\xa9\x92\x54\x76\xd7\x8e\xdf\xbd\x18\xea\xc7\x54\xd6\xdb\xde\xf5\xc6\x16\x87\x33\x67\x0e\x0f\x67\x46\xfa\xca\x14\x54\x28\x0d\xab\x20\x9f\x1e\xbe\x7d\x83\xe3\x69\xed\xfb\xc3\x32\x69\x59\xa7\x21\x87\x68\xdf\x8b\xc2\x34\x52\x44\xf1\xd1\xf7\x01\x00\x28\x96\x19\xa3\x9a\x5d\x4f\x76\xc8\x21\x7c\xc7\xa0\x56\xb8\xcf\x83\xda\x98\x4e\x67\x69\x5a\x35\xa6\xee\x77\x49\x21\xdb\xd4\x30\x51\x29\xd6\xea\x00\x0c\x53\x15\x9a\x3c\xd8\xee\x38\x13\x5f\x82\xf7\x9f\x87\x9d\x77\x29\x7b\x0f\xdf\x60\x81\x91\xa5\xe9\xc3\xc3\x43\x22\x3b\x14\xda\x28\x44\xd3\xb2\x2e\x91\xaa\x4a\x0b\xd9\x3d\xa9\xa6\xaa\xcd\x73\xb8\xff\xd3\xde\x1a\x6e\x3a\x14\x7f\xd8\x98\xdf\x59\x07\x85\x14\x03\x53\xa9\xf4\xa5\x44\x7a\xcc\x24\xf0\xd1\x1c\x50\xd8\x1c\xcf\xa1\x3f\x0d\xbb\x04\x10\xae\x49\x84\x59\x88\x51\x25\x2b\xdc\x64\xd3\xc8\xf7\x64\xf3\x7d\x2f\xec\x98\xd2\xf8\x1b\xd3\x75\x98\xc1\xac\x64\xcd\x74\xbd\xd5\x46\x91\xa2\x1e\x45\x35\x7b\x98\x8d\x49\x23\x4a\x7c\xbc\xd9\x47\xe1\xff\xc2\x18\xf2\x3c\x87\x37\x31\x1c\x7d\xcf\x9b\x1c\x20\x87\xd9\x57\xf7\x3b\x6d\x54\x74\x15\xaf\x07\xa0\xd3\x08\x48\x34\x38\x33\x6b\x67\x25\x85\xb3\x3a\x48\xd9\x8e\xcb\xb3\x91\xa9\x4a\x2f\xc0\x3b\xde\x98\x28\x48\x83\x78\xe1\x4a\x64\xc9\x35\xe1\x28\x2a\x53\xc3\xab\x1c\x7e\x88\x89\x60\x21\x85\x96\x1c\x13\x2e\xab\x28\xb8\x13\x0a\x0b\x59\x89\xe6\x80\xa5\x85\x04\x6d\x54\x23\x2a\x0b\xe6\x29\x34\xbd\x12\x20\x7a\xce\x67\xe6\x4e\x0a\xa2\x07\xb9\x25\x74\xff\x66\x33\x7a\x70\x66\x26\xdb\xd5\x6c\xb3\xf5\x67\x6d\x6f\x37\x6b\xcf\xf3\x2e\xa0\xd8\x2b\xf8\x28\x4c\x44\xeb\x15\x5c\xbd\x89\x17\x80\x76\xfb\x57\x2e\x99\x89\x38\x33\xf1\x02\xd8\xdd\x93\x22\x5e\x2f\xf1\x49\x88\x46\x7f\x62\x9f\x2c\x72\x4c\x0d\x34\x2c\x09\xc7\x59\x49\x11\x0f\x37\xb8\x10\xe8\xa3\xf8\xca\x78\x53\x5a\x96\x29\x67\x26\xe5\x52\x04\x2b\x18\x48\x72\x66\x56\x60\x53\xbe\x20\xd6\xf9\xd6\x2c\xc7\xd2\xd6\x9b\xe7\x85\x9c\x99\xc6\xf4\x25\x86\x99\xc5\xb0\x26\x29\xaa\xd9\x26\x85\xb5\x51\x96\x30\x1b\x92\x8d\x90\xeb\x11\x73\xcc\x36\xc0\xae\x7d\xef\xb4\xf2\x3d\xdf\x0b\x2b\xdb\x4f\x6e\x15\xb7\xac\xdb\x22\x5f\x59\xf5\x17\x95\xfc\x6a\x32\x79\xde\x58\x52\xd4\x1e\x0b\xe2\x67\xb7\xfb\x80\x75\xcd\xf6\x0b\x3e\x05\x1b\x1b\xf1\xcf\x87\x1d\x7d\xa7\x3b\x3f\xc7\x3e\x2b\x66\x62\xd7\x90\x2c\x03\xcd\xa4\x42\xf3\x61\x1c\x5a\x18\x05\x4d\x49\x75\xe8\x72\x19\xfc\x1d\x0a\x97\xea\x92\x5c\xa9\xe3\xef\x07\xef\x05\x63\xd7\x7e\x29\x96\x48\x8d\xb3\x70\x2b\x3b\x43\xb2\xd0\xa0\x20\x62\xe3\x20\xbc\xe9\x48\x57\x6d\x9b\x2b\x5e\x7b\x97\x22\xaf\xd9\x13\xd2\x00\x18\x23\x12\x8e\x6c\xcf\xd1\x58\x73\xe4\xa2\xcf\xa7\x1b\xb5\x80\x1c\xae\x69\xa4\x47\x41\xcb\xba\x60\x40\x1f\xe1\x5d\xe8\x84\x95\xe5\x67\x49\x67\x5c\x00\x2c\xc7\xfd\x44\xfb\xc3\xd9\x1a\x4d\x7d\x43\x73\xda\xf1\xfe\x85\xc6\xaf\xe4\x04\xeb\x7a\x3b\x1e\xcb\xd9\x72\xd6\x72\xa8\xbc\xa1\xf0\x96\xfa\xb8\x35\xf8\x5f\xd5\x5e\xfa\xfa\x2c\x86\x2e\x50\xe0\x67\x7c\xb4\xd3\xe8\x81\x35\x06\xf6\x68\x8a\x3a\x12\xf8\x00\xb7\xf8\x57\x8f\xda\x44\xe1\xf4\x6e\xd1\xb2\x7d\xc0\x1a\x15\xda\x77\xa1\x0d\x4d\x0e\x4d\x17\xae\xe0\x08\x35\xb2\x12\x95\xce\xe0\x08\xe1\x87\xa2\xc0\xce\x84\x19\x84\xac\xeb\x78\x53\x30\x3a\x5e\x4a\x9e\x70\x82\x53\x1c\x27\xa6\x46\x11\x29\xc8\xdf\x83\x4a\x0c\x3e\x9a\x28\x8e\xd7\xdf\x71\xba\xbb\xbd\x86\x1c\xee\x6e\xaf\x93\x42\x21\x33\x78\xb3\xfb\x13\x0b\x73\x77\x7b\x6d\xa9\xfd\xcc\xe5\x2e\xba\x9f\xc9\x6f\xe6\xf8\x81\x14\x97\xac\x8c\x26\x18\x62\xb7\x63\x1a\xb7\x1d\x33\x75\x06\x2f\x9c\x26\x84\xd3\x84\xf1\x3a\x7d\xf6\x32\xf9\x97\x4e\xb5\xac\xcd\x13\xc7\x6d\xaf\xf8\xec\x35\x5b\x16\x7e\xa6\xf9\xce\x6d\x32\x04\x1b\xb7\x90\x5f\xec\x33\xba\x5b\x7b\xb4\xcc\x3e\xda\x22\x68\x3b\xa9\x4c\x06\xf7\xbe\xe7\x79\x73\xd6\xd5\xb8\xbb\x99\x1e\xb4\xec\x55\x81\x7a\x88\xf3\x5a\xd6\x1d\x50\x8c\x0b\xda\xee\x15\xcf\x66\x76\x2b\xc7\xba\xd5\xfd\xae\x94\x2d\x6b\x84\xce\xe0\x3e\x64\xe1\x0a\xc2\x1d\xfd\x14\xf4\x53\x86\x9b\x85\x73\xc7\xe8\x03\x29\x83\xe3\x28\x52\x36\xa9\x77\x9a\xdd\x6c\x12\xdd\x1c\x30\x83\x1f\xaf\xde\xce\xe6\x96\x3d\x6e\x69\x88\x67\x70\xf5\x13\xd9\x4e\x23\x6f\xfa\x3f\x5d\x1e\xec\xae\x36\x6e\x93\x39\xfd\xe9\x76\x18\x35\x86\x13\xed\x74\xee\x10\x3c\xa5\x70\x7c\x68\x3e\xd8\xaf\x24\xf0\x4f\x31\x4d\x86\xbf\x03\x00\x00\xff\xff\xd8\x51\x2b\x81\x6e\x0a\x00\x00")

func staticJavascriptGeotagMapsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptGeotagMapsJs,
		"static/javascript/geotag.maps.js",
	)
}

func staticJavascriptGeotagMapsJs() (*asset, error) {
	bytes, err := staticJavascriptGeotagMapsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/geotag.maps.js", size: 2670, mode: os.FileMode(420), modTime: time.Unix(1586211117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xce\x4d\x2c\x50\xa8\xe6\xe2\x4c\xca\x2f\x4a\x49\x2d\xb2\x52\x28\xce\xcf\xc9\x4c\x51\x28\xc9\xc8\xcc\xb3\xe6\xe2\x2c\xcf\x4c\x29\xc9\xb0\x52\x30\x34\x30\x50\xb5\xe6\xe2\xcc\x48\xcd\x4c\xcf\x28\xb1\x52\x30\x35\x28\xcb\xb0\xe6\xaa\xe5\x02\x04\x00\x00\xff\xff\x50\x92\xd1\xb3\x3b\x00\x00\x00")

func staticCssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssIndexCss,
		"static/css/index.css",
	)
}

func staticCssIndexCss() (*asset, error) {
	bytes, err := staticCssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/index.css", size: 59, mode: os.FileMode(420), modTime: time.Unix(1586211184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/javascript/geotag.init.js": staticJavascriptGeotagInitJs,
	"static/javascript/geotag.maps.js": staticJavascriptGeotagMapsJs,
	"static/css/index.css": staticCssIndexCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"index.css": &bintree{staticCssIndexCss, map[string]*bintree{}},
		}},
		"javascript": &bintree{nil, map[string]*bintree{
			"geotag.init.js": &bintree{staticJavascriptGeotagInitJs, map[string]*bintree{}},
			"geotag.maps.js": &bintree{staticJavascriptGeotagMapsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
