// Code generated by go-bindata.
// sources:
// templates/html/editor.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlEditorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x8f\x9b\x3e\x10\x3d\x93\x4f\x31\xf2\x9d\xb0\xda\xdf\x15\xb8\xed\xaf\x52\x55\x75\xab\xae\xaa\x1e\xab\x01\x86\x8d\xb7\xb6\xa1\xf6\x90\x36\x8d\xf6\xbb\x57\xc6\x84\x3f\xd9\x44\x95\x92\xf4\x12\x39\x33\xcc\x9b\x37\x6f\x9e\x11\xfb\x3d\x54\x54\x4b\x43\x20\xa8\x92\xdc\x58\x01\xaf\xaf\xab\xfd\x1e\x98\x74\xab\x90\x09\x84\x34\xe5\xb7\x0d\x61\x25\x60\xed\x73\xa9\x2b\xad\x6c\x19\x78\xd7\x52\x26\x98\x7e\x71\xf2\x82\x5b\x0c\x51\x01\xce\x96\x99\x98\x45\x92\x67\x6a\x18\x9f\xd7\x1a\x5b\xb7\x7e\x71\x22\x4f\x93\x90\xc8\x2f\x45\x2a\x51\x93\xc5\x2b\xb1\x14\x61\xad\x88\xd7\x0a\x77\x64\xdd\xba\x6c\x0c\xdb\x46\x1d\x83\x2a\x69\xbe\x83\x25\x95\x09\xc7\x3b\x45\x6e\x43\xc4\x62\xde\xa3\x74\x4e\xc0\xc6\x52\x9d\x09\x7f\x3e\x07\xdb\x3f\x96\x5c\x02\x18\x96\x32\x02\xec\xf7\x20\x6b\x58\x3f\x18\x2c\x14\x3d\x3e\xe8\x82\xaa\x2b\x76\xd2\x90\x07\xb8\xcd\x56\x06\x2c\x69\x24\x5f\xad\xe2\x80\x35\x1b\x9a\x4c\x35\xf8\x72\x1a\xff\x93\xc2\x92\x36\x8d\xaa\xc8\x5e\xa1\x41\x3b\xa1\xdc\x46\x88\x39\xe0\x4d\xd4\x98\x03\xfe\x45\x92\xaf\x56\xf2\x55\x6a\x60\x2b\x6f\xa3\xc2\xcf\x9e\xc9\x4d\xb1\x6e\x22\xe6\x80\xf5\x56\xc7\xb4\x92\x5b\x28\x15\x3a\x97\x09\x7f\x6d\x51\x1a\xb2\x22\x5f\xad\x00\x00\x4e\x5f\x3b\x9f\x09\xf9\x45\x31\xda\xca\xd7\x45\xc7\xc1\xd8\xbf\x44\x03\x66\xd4\x17\xd5\x8d\xd5\x87\x07\xfc\x39\x96\x46\x49\x43\x22\x5f\x45\x51\x2a\x4d\xdb\xf1\x22\x3b\xbc\x4c\x40\xdb\xd8\xe9\xf8\xfe\x30\xa6\x23\xb4\xe5\x46\x80\x41\x4d\x99\x08\x57\x27\xee\xac\x12\x20\xab\xe5\xff\x99\x91\x32\xf1\x60\xbc\x53\x10\xbe\x7c\xfe\x00\xdc\x80\x25\xb6\x92\xb6\x24\x60\x8b\xaa\xa3\x4c\x08\x40\x2b\x31\x56\x58\x78\x75\xff\x27\xf6\x3d\x9c\xfc\x4d\x99\xf8\xef\xae\xd7\x2e\x8a\xd2\xa2\x63\x6e\xcc\x81\x65\xc1\x06\xf4\x2e\xbe\xf7\x3f\x4e\xc7\x77\x23\xc3\xae\xd0\x92\x17\x7c\xea\x1e\x2f\xef\x61\xd3\x24\xc0\xe4\x83\x2c\x89\x9f\x36\x5f\x45\x69\x52\xc9\x6d\xbe\x8a\x06\x25\x67\xd5\x52\xe3\x33\x89\x85\xb6\x45\x53\xed\xbc\x33\x42\xc9\x1b\xe9\xeb\xa6\x61\xb2\x0b\x0a\x9a\x18\xc7\x8a\xd0\x78\x3c\x1e\x96\x3e\x78\x63\x0c\x5d\xb4\xe7\x33\x37\x34\x0c\x3b\x28\xe8\x79\x05\x6b\xc6\x0e\xb7\xd3\x6c\x5e\xd2\x82\x4d\xdc\x5a\xa9\xd1\xee\x44\xfe\x84\x5b\x3a\x12\x6c\xe2\xd9\xff\x3d\xd1\xf4\xe8\x4d\xf9\xef\xdc\x37\x73\x58\xfc\xa3\x23\xbb\x0b\x8a\x9f\x08\x9f\xf4\x62\x1f\xec\xa1\xbc\x25\x03\x34\xd4\xfe\x9b\xe4\xa4\x29\x9f\x42\xef\x0b\xac\x98\x87\xd2\x73\xce\x1b\x57\x7d\x4c\xde\x92\xeb\x14\xbb\xc9\x68\x0b\xfd\x07\xf9\x4f\xf8\x56\x63\x7b\xb9\x5d\x3b\x6e\x3b\x16\x23\x2d\x62\x94\xca\xf5\x33\xbb\x4e\x7b\x57\xe4\xef\xa8\x79\xff\xf4\xf8\x31\x4d\x0e\x01\x9f\x3c\xf4\xae\x09\xb9\xb3\xb4\xe4\x9c\x26\x13\xce\x99\x2b\x30\x9c\xdf\x7c\x0a\x7a\x6e\xc3\xa7\xe0\xe4\xbc\x3f\x01\x00\x00\xff\xff\x82\x7b\x41\xda\x47\x0a\x00\x00")

func templatesHtmlEditorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlEditorHtml,
		"templates/html/editor.html",
	)
}

func templatesHtmlEditorHtml() (*asset, error) {
	bytes, err := templatesHtmlEditorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/editor.html", size: 2631, mode: os.FileMode(420), modTime: time.Unix(1586895604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x3f\x6f\xe3\x30\x0c\xc5\x77\x7f\x0a\x1e\xe7\x73\x8c\xdb\x6e\xb0\xbc\x05\x45\x81\x02\xed\xdc\xa5\x60\x24\x26\x56\x20\x8b\x86\xc5\x24\x4d\x0d\x7f\xf7\x42\x75\xdc\xa4\x7f\x26\x89\xef\xfd\x9e\x28\x0a\x1a\x47\x70\xbc\xf5\x91\x01\x7d\xb4\x2f\x2d\x93\x43\x98\xa6\xa2\xfe\xe3\xc4\xea\xb9\x67\x68\xb5\x0b\x4d\x51\xe7\x05\x02\xc5\x9d\x41\x8e\xd8\x14\x00\x75\x86\xf3\x06\xa0\xee\x58\x09\x6c\x4b\x43\x62\x35\x78\xd0\x6d\xf9\x1f\x2f\x96\x7a\x0d\xdc\xdc\xb1\x28\xed\xea\x6a\xae\x6e\x42\x91\x3a\x36\x78\xf4\x7c\xea\x65\x50\x04\x2b\x51\x39\xaa\xc1\x93\x77\xda\x1a\xc7\x47\x6f\xb9\xfc\x28\xfe\x82\x8f\x5e\x3d\x85\x32\x59\x0a\x6c\xfe\x2d\x2d\x92\x1d\x7c\xaf\x90\xaf\x6b\x50\xf9\x55\xab\x3d\x1d\x69\x56\x11\xd2\x60\x0d\xde\x28\xd5\xa9\x95\x24\x71\xeb\x87\xa4\xab\xc8\xba\xda\x27\x6c\xea\x6a\x36\x9b\x7c\x60\x1e\xae\x5a\xa6\xab\x37\xe2\xce\xe0\x48\xa9\x5c\xda\x07\x52\xaf\x07\xc7\x06\xc7\x11\x56\xf7\xb3\xfa\x70\x11\x61\x9a\xf0\x1b\x2e\x71\xf7\x0b\xbf\xa8\x3f\x03\x6f\x22\xdd\x17\xf6\x59\xa4\xbb\x62\x7d\x20\xcb\xad\x04\xc7\x43\xc9\xd1\xf5\xe2\xf3\x7b\x65\xfc\xe9\xea\xac\x2f\xc6\x35\x26\xdc\x6d\xd8\x7d\x26\xd2\x1c\x79\x5c\x67\x75\xa1\x53\xc6\x9b\x62\x1c\x81\xa3\xcb\xff\xe0\x3d\x00\x00\xff\xff\x2e\xf7\xe5\x06\x20\x02\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 544, mode: os.FileMode(420), modTime: time.Unix(1586471433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/editor.html": templatesHtmlEditorHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"editor.html": &bintree{templatesHtmlEditorHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

