// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6a\xc3\x40\x0c\x84\xef\x7e\x0a\x55\xe7\xba\xa1\xb7\x1e\x76\x7d\x2d\x85\x3e\x41\x2f\x45\xdd\x55\x6c\xc1\x5a\x0a\x89\x92\x90\x2e\x7e\xf7\xe2\x3a\x86\xfe\xe4\x24\xcd\xe8\x1b\x18\x54\x2b\x64\xde\x8a\x32\xa0\x68\x7a\x1f\x98\x32\xc2\x34\x35\xe1\x2e\x5b\xf2\xcb\x8e\x61\xf0\xb1\x74\x4d\x98\x07\x14\xd2\x3e\x22\x2b\x76\x0d\x40\x98\xe1\x79\x01\x08\x23\x3b\x41\x1a\x68\x7f\x60\x8f\x78\xf4\x6d\xfb\x84\xd7\x93\x8b\x17\xee\x9e\xd9\x9c\xfa\xb0\x59\xd4\x8f\x90\xd2\xc8\x11\x4f\xc2\xe7\x9d\xed\x1d\x21\x99\x3a\xab\x47\x3c\x4b\xf6\x21\x66\x3e\x49\xe2\xf6\x5b\xdc\x83\xa8\xb8\x50\x69\x0f\x89\x0a\xc7\xc7\xa5\xc6\x66\xed\x11\x3e\x2c\x5f\x20\x93\x53\xbb\x82\x85\x5c\xfc\x98\x39\x62\xad\xf0\xf0\xb2\xb8\xaf\x57\x13\xa6\x09\xff\xe0\xa6\xfd\x0d\x7e\x75\xff\x07\x3e\xcd\xc6\x5f\xec\x9b\xd9\x38\x63\x5d\x53\x2b\xb0\xe6\xf9\x97\x5f\x01\x00\x00\xff\xff\x84\x41\x08\xec\x64\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 356, mode: os.FileMode(420), modTime: time.Unix(1586210824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x6e\xac\x30\x0c\x86\xd7\xe4\x14\x96\xf7\x0f\x2e\x40\xb8\xca\x93\x9b\x98\x21\x53\x08\x28\x76\xd1\xa0\x68\xee\x5e\x85\x41\x55\xda\xee\xba\x8a\xf3\x7f\xf6\xb7\xf9\x73\x06\xcf\x63\x88\x0c\x18\xa2\xe7\x07\xc2\xf3\x69\x72\x06\xe5\x65\x9b\x49\xcf\xd8\xfd\x9f\x98\x3c\x42\x5b\x58\x3f\x87\xf8\x0e\x89\x67\x8b\xa2\xc7\xcc\x32\x31\x2b\x82\x1e\x1b\x5b\x54\x7e\x68\xe7\x44\x10\xa6\xc4\xa3\xc5\x32\x77\xa7\xb7\x3d\xd3\x6e\x30\xbd\xb8\x14\x36\xad\x0f\xee\xb4\xd3\x2b\x45\x90\xe4\x2c\x56\x49\x77\xe3\x55\xe9\xd6\x2e\xb4\x49\x7b\x17\x1c\xfa\xee\x05\xfe\x6c\x0a\x31\xe8\x4f\x93\x0f\x3b\xb8\x99\x44\x2c\xba\x35\x2a\x85\xc8\x09\x07\x63\x00\x00\xbe\x41\x4a\x1e\x07\xd3\x98\xe6\x4c\x83\xb7\xb8\xd0\x86\x35\xfe\xf7\xb6\xfa\xa3\xc8\x7d\xd8\x87\x6b\xaf\xc6\xe3\xba\xea\x29\x6f\xbe\xe4\x45\x33\x32\xe9\x47\xe2\xea\xf0\x7a\xcb\x96\xb9\x3e\xbf\x7a\x29\xb2\xab\x97\x9c\x81\xa3\x2f\xd3\x67\x00\x00\x00\xff\xff\x69\x8c\x6d\xba\xd3\x01\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 467, mode: os.FileMode(420), modTime: time.Unix(1586212610, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

