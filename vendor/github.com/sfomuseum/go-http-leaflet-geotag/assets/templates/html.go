// Code generated by go-bindata.
// sources:
// templates/html/camera.html
// templates/html/crosshair.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlCameraHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x8e\xdb\xb8\x15\xbe\xee\x3c\xc5\x81\x16\xa9\x3d\xad\x2c\x59\x9e\xc9\x4c\xad\xd8\x06\x76\x83\x64\x9b\x62\xd2\x59\x34\x41\x2f\x1a\x04\x0b\x5a\x3a\x96\xd8\x50\x24\x41\xd2\xf6\x38\x86\xdf\xa9\xcf\xd0\x27\x2b\x48\xc9\x12\x65\x7b\x66\x0b\xb4\x48\x30\x10\x0f\x3f\x9e\x9f\xef\xfc\x90\xf0\x7e\x0f\x39\xae\x28\x47\x08\x32\x52\xa1\x22\x01\x1c\x0e\x57\xfb\x3d\x18\xac\x24\x23\x06\x21\xa0\x3c\xfb\xb5\x44\x92\x07\x10\xd9\x3d\x00\x80\x99\x36\x3b\x86\x0b\xf7\x0d\xb0\x14\xf9\x0e\xf6\xcd\x02\x40\x0a\x4d\x0d\x15\x3c\x05\xb2\xd4\x82\xad\x0d\xbe\xe9\xf6\x48\x9e\x53\x5e\xa4\x30\xee\x64\x15\x51\x05\xe5\x3d\xd1\x96\xe6\xa6\x4c\x21\x19\x8f\x5f\x75\xc2\x12\x69\x51\x9a\xa3\xb4\x15\xe7\x54\x4b\x46\x76\x29\xac\x18\x3e\x75\xe8\x95\xe0\x66\xa4\xe9\x77\x4c\x21\xb9\x93\xa7\x1b\x2b\x52\x51\xb6\x4b\xa1\x12\x5c\x68\x49\xb2\xd6\xc5\xc3\x95\x17\x54\x08\x24\x04\x92\x6e\xa8\xa6\x06\x73\x2f\xc4\x4c\x30\xa1\x52\x58\x32\x92\x7d\xbb\x78\x12\x16\xf0\x07\x0f\x5f\x51\x3e\x6a\x62\x9a\x8c\xc7\x9d\x37\xed\x99\x32\xf1\xd0\xbe\xeb\xd1\x6b\xac\x4e\xa9\x1a\x19\x21\x3d\xba\x3a\x25\x93\x67\x94\x74\x2a\x5a\x6c\xc4\x2c\x99\xa7\xf8\x6d\x43\x31\x17\xaa\x22\xec\xec\xd0\x0f\x15\x91\xa3\x4c\x70\x43\x28\x47\x15\xba\xf5\xc5\xc4\x2b\x64\xc4\xd0\x0d\x3e\x97\xbc\x17\xf2\xdc\x19\xd3\x34\xc7\x25\x51\x9e\x81\x06\x7e\xe7\x53\xe8\xd5\x54\xe2\x53\x25\x36\xa8\x56\x4c\x6c\x53\x20\x6b\x23\x2e\x68\x67\x34\x47\xd5\x45\xe3\x99\x59\x0a\x65\xb7\x8e\x09\xf3\x6d\x35\x5b\x4d\xfe\x55\xb1\x24\xc3\x71\x08\xcd\xff\xe8\xf5\xf5\x19\xd2\x35\x4a\x0a\x5a\x30\x9a\x9f\xc5\x7d\xe3\x73\xc1\x70\x65\x52\xc8\x08\xcb\x86\xaf\xc7\xaf\x60\x04\xc9\xeb\x57\x9e\xbe\xef\x23\xca\x73\x7c\x4a\x61\x3a\x9d\x4e\xdf\xfc\x57\xcd\xb6\x14\xc6\x88\xca\x96\x9c\x1f\x42\xdb\x6e\x3d\x62\x00\x96\x24\xfb\x56\x28\xb1\xe6\xf9\x31\xbc\x6d\x49\x2f\xf6\xae\xad\xc9\x3e\xd9\x4d\xb0\x8a\xe4\x74\xad\x4f\x0d\x5e\x6c\xd0\xd3\x44\xf8\xcd\xd2\x3a\xd8\xb3\x71\x69\x74\xbc\x58\x3f\x84\x17\x0c\x3d\xbd\x06\x9f\xcc\x88\x30\x5a\xd8\x02\xb5\xd5\x78\xa6\xe7\xd6\xef\xb6\x56\x91\x54\x78\xc9\xbb\x67\x0b\x36\x84\xa8\x64\xff\xd4\x7e\x41\x9d\x51\xfb\xc3\x8a\xd8\x7f\x9d\x0e\xfb\x77\x16\x7b\x63\x75\x96\xd3\x0d\xd0\x7c\x1e\xf4\x7a\x2e\x38\xce\x5c\x7f\xbb\x13\xc6\x39\xdd\x9c\x21\x4e\x2b\xbd\x85\x03\xcc\x18\x59\x22\x83\x95\x50\x47\x58\xb0\xf8\xd1\xd2\x96\xce\x62\xb7\xe5\x41\x29\x97\x6b\xe3\x29\x0c\xc0\xec\x24\xce\x03\x45\x78\x81\x81\x1d\x71\xf3\x20\x09\xa0\x22\x4f\xf3\x20\x99\x8c\x03\xd0\x06\xa5\x13\x6d\x08\x5b\xe3\x3c\x98\x8c\x7d\xcb\x5a\x12\xee\xb4\xb9\x34\x05\x8b\x59\x6c\x25\x17\x22\xf1\x3f\xdb\x90\x6a\xa6\xbb\xc0\xcb\x64\xf1\x80\x64\xc5\xd0\x44\x3f\xa3\x30\xa4\xf8\xa5\x14\x46\xcc\xe2\x32\xe9\x20\x93\xc5\x47\x91\x63\x0a\x6f\xdd\x3d\xd7\x78\x90\x31\xa2\xf5\x3c\x70\xd3\x30\x58\x0c\xf5\x96\x9a\xac\x04\x23\x60\x46\xa0\x54\xb8\x9a\x07\x71\xa6\x84\xd6\x25\xa1\x2a\x0e\x16\x6f\x8f\xdf\xb3\x98\x2c\xae\x1b\x9f\x67\x71\x39\xf1\xcd\x3c\xae\x8d\x5c\x9b\xb4\x27\x96\x0a\x17\x33\x4d\x2a\xe9\xfc\x17\x0e\xe1\xe5\xcd\xee\x2c\x66\xb1\x45\x9d\x05\xad\x33\x45\xa5\x39\x62\x37\x44\x81\x1d\xbb\x73\x78\x88\x2a\x22\x87\x83\x8a\xc8\x41\xe8\xdf\x4d\xc8\x0d\xaa\x14\xbe\xdc\xdc\x47\x77\xc9\xfd\x74\x1a\xc2\x28\x99\x4c\xa2\x9b\xfb\xf1\xf4\xf6\xe6\x6b\xf8\xbb\x38\x86\x4f\xef\x1f\xbb\xc1\x22\xec\x8c\x48\x6e\x43\xff\xb6\xfa\x87\x13\xde\x79\x32\xf2\x54\xcb\x92\xfb\x63\xcd\x5e\x5f\x79\x2e\x2d\x89\xc6\x07\xb2\x43\xe5\x1c\x33\x94\xd5\xab\xe1\xa0\x34\x46\xa6\x71\xbc\xd7\x87\xc8\x62\x2a\x22\x75\x94\x11\x65\x44\x96\xf3\x28\x13\x55\xec\xa8\xff\x95\x30\x16\xef\xbf\x1f\xe2\xfd\xd3\x21\xde\xef\x0e\x91\xe4\x45\x2f\x2a\x62\x8c\xa2\xcb\x75\x3d\xea\x06\xbf\xcf\x84\xdc\xbd\xe9\x72\xd4\x18\xd9\x6e\xb7\x91\x90\xc8\xb5\x51\x88\xa6\x22\x32\x12\xaa\x88\x2d\x56\xd5\xf9\x7d\x94\xc8\x3f\xb9\xcd\x8f\x44\xda\x14\x82\xed\x0a\xa7\x58\x28\x1d\xc2\x25\xbd\x3a\x8d\x63\xe7\xb0\xf3\xd6\xf3\x43\x07\x8b\xb7\x3f\xfe\xed\xf3\xa3\xd5\x33\x68\x49\x89\x48\x9e\x7f\x16\xc3\x8a\xc8\x23\x3f\x71\x0c\x5c\x18\x04\x53\x12\x03\x5b\x04\x49\xb4\x86\x4c\x08\x95\x53\x4e\x0c\x6a\x20\x1a\x98\xe0\x21\x30\x62\xea\x13\x1e\xaf\xf5\xa3\xec\x17\x41\xb9\x81\x39\x7c\xa9\x33\x79\x37\xbd\xb5\x69\xb5\x09\x9e\xdc\xfe\xe9\xe6\xfe\xab\x77\xc0\x10\x55\xa0\x39\x39\xe0\x52\x5f\x1f\xb0\x15\xf1\xd5\xcf\x9c\xb4\x50\x0d\x73\x7f\x52\xee\x24\xa6\x30\x78\x8f\xc4\xac\x15\x0e\xba\x2a\x90\x4a\x48\x54\x86\xa2\x4e\x3d\x38\x80\xeb\x61\x3b\xf7\x5b\xd9\xa1\x3b\x54\xa0\xa8\xd0\xa8\x5d\xff\x48\x63\xe3\xe7\x66\xf3\xad\x60\x0c\x33\x4b\xab\x67\xae\x3d\xeb\x0c\x7e\xf1\xe4\xd0\xd3\xe5\xe9\x73\x81\xf7\x54\xb8\x9e\xe8\xd8\x4e\x7d\x4a\x7b\xb0\x43\xf8\x7f\x32\xe0\xa5\xa0\x6f\xc0\x5b\x7d\xbd\x3a\x95\x1e\xfc\xa4\x14\xdd\x10\x6b\xc6\x95\x6d\x2b\x4f\x1a\xd5\x51\x0c\xeb\xec\x85\xfd\xb7\x66\x3d\xc2\x21\x19\x5f\xac\xca\x23\x30\x12\x7c\x38\xc8\x4a\x3b\xbe\x07\x21\xac\xd6\xdc\xd1\x0f\x43\xdc\x20\x37\xd7\xbd\xf8\xd7\x32\x27\x06\x3f\xd5\x53\x77\xd8\xa9\x38\x9c\x68\x73\x77\xc4\xff\xa0\xcc\x63\xa0\x1e\x91\xef\x18\x56\xe8\x2a\x39\x17\xd9\xda\x7e\x46\x05\x1e\xa5\x3f\xed\x3e\xe4\xc3\x41\x0d\x1c\x1c\xf5\xb4\xa6\x4f\xcc\x78\x2e\x58\xf5\x2b\x8a\x2c\x7f\x5c\xfd\x9d\xe2\x16\xe6\xe7\x74\x5b\x2b\xef\x3b\x88\xe7\x65\xcf\xaf\x88\x72\x8e\xea\xcf\x9f\x3f\x3e\xc0\x1c\xfe\xf2\xe9\xf1\xaf\x91\x36\x8a\xf2\x82\xae\x76\x43\xcf\x42\x08\x7c\xcd\x58\x08\x93\x4e\x8d\x7d\x21\x44\x25\x2d\x4a\x37\xfe\x7e\x62\x22\xfb\x36\xec\xa9\xbe\xbe\xea\xf9\x5b\x3f\x66\xe6\xbe\xdf\x51\xd7\x8d\x91\xdb\x6e\x0f\xd4\x17\x74\xe4\xee\x5d\x98\x43\x7f\xd3\xad\x3e\xe3\x53\xdf\xf9\x8f\xc4\x94\x91\x7b\xa2\x0c\x1d\xe0\x1a\xfe\x08\x83\x7f\xff\x6b\x70\xa9\x38\x9b\x17\xdb\x0b\x39\xa9\x11\x6d\x4e\xda\x00\xac\xd9\x97\xce\x39\xd0\xa0\x0d\xfd\x24\x97\xae\xac\xcf\x32\x79\x64\x46\x12\xa5\xf1\x03\x37\x43\x3f\xfa\x6b\x7f\x0a\x9d\xa4\x58\xa3\xa9\x35\xd6\x01\xff\x06\x41\xb5\x99\x1e\x29\xcf\x95\x72\x4b\x56\xe3\x09\xc9\xf3\x77\xb6\x0d\x1e\xa8\x36\xc8\xed\xa5\x78\xec\x13\x2f\xae\x36\xe8\x38\x86\x0f\x1c\x3e\xbc\x9b\xcd\x93\x24\x84\xfa\xd5\xe5\xba\x08\x72\x81\xda\x5e\x25\xb0\x15\xea\xdb\x6f\x99\x68\x1b\xfb\x92\x8d\xcb\x7e\xf7\x58\x3e\xbe\x48\xbd\xc7\xc7\xd9\xaf\x02\x2b\x21\x8c\xf7\xab\xc0\x7e\x0f\xc8\x73\xbb\xfa\x4f\x00\x00\x00\xff\xff\x9f\x4b\x92\x3e\x56\x10\x00\x00")

func templatesHtmlCameraHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCameraHtml,
		"templates/html/camera.html",
	)
}

func templatesHtmlCameraHtml() (*asset, error) {
	bytes, err := templatesHtmlCameraHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/camera.html", size: 4182, mode: os.FileMode(420), modTime: time.Unix(1586196523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlCrosshairHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\xed\x6e\xe3\x36\x10\xfc\xdd\x7b\x8a\x85\x0e\xad\x95\x42\x96\x6c\xa7\x4d\x1a\x9d\x2c\xa0\x17\xf4\x13\x49\x73\x68\xf2\xab\x45\x71\x58\x8b\x94\xc4\x86\x22\x09\x92\xb2\xe3\x08\x7e\xf7\x82\xf2\x87\x68\xc7\x57\x04\x08\xc8\xe5\x70\x76\x38\xbb\x6b\xbb\xeb\x80\xd0\x92\x09\x0a\x41\xa1\xa5\x31\x35\x32\x1d\xc0\x66\xf3\xae\xeb\xc0\xd2\x46\x71\xb4\x14\x02\x26\x8a\xcf\x35\x45\x12\x40\xec\xce\x00\x00\x32\x63\xd7\x9c\xe6\xfd\x1a\x60\x21\xc9\x1a\xba\xdd\x06\x40\x49\xc3\x2c\x93\x22\x05\x5c\x18\xc9\x5b\x4b\x3f\x0c\x67\x48\x08\x13\x55\x0a\x93\x21\xd6\xa0\xae\x98\x38\x0a\xad\x18\xb1\x75\x0a\xd3\xc9\xe4\xeb\x21\x58\x53\x56\xd5\x76\x1f\x3d\x84\x09\x33\x8a\xe3\x3a\x85\x92\xd3\x97\x01\x5d\x4a\x61\xc7\x86\xbd\xd2\x14\xa6\x57\xea\xf4\xa0\xc4\x86\xf1\x75\x0a\x8d\x14\xd2\x28\x2c\x0e\x12\x37\xef\xbc\x47\x45\x80\x11\x60\xba\x64\x86\x59\x4a\xbc\x27\x16\x92\x4b\x9d\xc2\x82\x63\xf1\x7c\xf6\x26\xe4\xf0\xad\x87\x6f\x98\x18\xef\xde\x34\x9b\x4c\x06\x35\x87\x3b\xf5\xd4\x43\xfb\xd2\xe3\xef\x69\x73\x6a\xd5\xd8\x4a\xe5\xd9\x35\x90\xcc\xbe\x40\x32\x50\x1c\xb0\x31\x77\x66\x9e\xe2\x57\x3b\x8b\x85\xd4\x0d\xf2\x37\x97\xde\x37\xa8\xc6\x85\x14\x16\x99\xa0\x3a\xea\xf7\x67\x0b\xaf\x29\x47\xcb\x96\xf4\x4b\xc5\xfb\x9f\x3a\x0f\xc9\x0c\x23\x74\x81\xda\x4b\xb0\x83\x5f\xf9\x16\x7a\x3d\x35\xf5\xad\x92\x4b\xaa\x4b\x2e\x57\x29\x60\x6b\xe5\x1b\x76\xa5\xa9\x5f\x9f\xd3\x16\x7c\xa3\x22\x82\xb8\xe6\xff\x1a\xef\xce\x02\x8b\xe7\x4a\xcb\x56\x90\xf1\xae\x1d\xde\x97\xe8\xfe\x06\x0e\xf7\x3f\x4b\xbc\x59\xc9\x08\x5b\x02\x23\xf3\xe0\xc8\xc8\x60\x3f\x48\xfe\xf1\x10\x4c\x08\x5b\xee\xae\x7b\xcb\x3d\x74\xa7\x6f\x80\xd7\xd3\xfc\x8e\x62\xc9\xa9\x8d\x7f\xa1\xd2\x62\xf5\xa9\x96\x56\x66\x49\x3d\x1d\x20\xb3\xfc\x5e\x12\x9a\xc2\xed\x7e\xea\x21\x33\x0a\x05\x14\x1c\x8d\x99\x07\x7d\x6f\x04\x79\x68\x56\xcc\x16\x35\x58\x09\x19\x42\xad\x69\x39\x0f\x92\x02\x1b\xaa\x31\x09\xf2\xdb\x7e\x91\x25\x98\x5f\x64\x89\xbb\x9d\x67\x49\x3d\xf3\x73\x3c\xb4\x56\xb5\x36\x3d\x0a\x2b\x4d\xf3\xcc\x60\xa3\x7a\xf1\xb2\x47\x78\x4f\x75\x27\x79\x96\x38\xd4\x9b\x17\x9b\x42\x33\x65\xf7\xd8\x25\x6a\x70\xed\x37\x87\xbb\xb8\x41\x15\x8e\x1a\x54\xa3\xc8\x9f\x51\x2a\x2c\xd5\x29\xfc\x7d\x79\x1d\x5f\x4d\xaf\x6f\x6e\x22\x18\x4f\x67\xb3\xf8\xf2\x7a\x72\xf3\xdd\xe5\x3f\xd1\x57\x49\x02\x8f\x3f\x3f\x1c\xf0\xaf\x52\x36\x29\x4c\x2f\x23\x7f\x6a\xff\xea\x83\x57\x5e\x0c\x5f\xb6\xb1\xe9\x0f\xfb\x32\x5f\xbc\xf3\x24\x2d\xd0\xd0\x3b\x5c\x53\xdd\x0b\xb3\x8c\x6f\x77\xe1\xa8\xb6\x56\xa5\x49\xd2\x99\x4d\xec\x30\x0d\x2a\x13\x17\xa8\xad\x2c\x88\x88\x0b\xd9\x24\xbd\xe9\x9f\x91\xf3\xa4\x7b\xdd\x24\xdd\xcb\x26\xe9\xd6\x9b\x58\x89\xea\xe8\x55\x68\xad\x66\x8b\x76\x3b\x66\xa3\x6f\x0a\xa9\xd6\x1f\x86\xea\xec\x92\xac\x56\xab\x58\x2a\x2a\x8c\xd5\x94\xda\x06\x55\x2c\x75\x95\x38\xac\xde\x56\xf6\x41\x51\xf1\xd8\x1f\xde\xa3\x72\x25\x04\xd7\x8c\x3d\xb1\xd4\x26\x82\x73\xbc\x26\x4d\x92\x5e\x70\xaf\xd6\xd3\x61\x82\xfc\xf6\xc7\x3f\x9f\x1e\x1c\xcf\xe8\x60\x4a\x8c\x84\x3c\xc9\xb0\x41\x75\xe4\x4f\x35\xb4\xe4\xd0\x7c\xce\x2a\xef\x20\x3e\x7c\x19\x85\x47\x34\x7b\x0f\x62\x29\xc2\x11\x13\xaa\xb5\xa3\x08\xca\x56\x14\x4e\x05\x84\x74\x49\x85\xbd\xf0\xbc\x02\x68\x15\x41\x4b\x1f\xb7\x23\x12\x0e\x0c\xc7\x35\xdb\x76\xe1\x4f\x9c\x36\x54\x58\x98\x03\x91\x45\xeb\x96\x71\x45\xf7\xd1\x8f\xeb\xdf\x48\x38\xda\x02\x47\x7b\x9e\x43\xea\x93\x34\x9e\x04\x47\xaf\x24\xeb\x69\xcf\x3d\xdd\xa5\x38\x6c\x3e\x39\xa0\xa7\xf2\x48\x57\xcc\x84\xa0\xfa\xd7\xa7\xfb\x3b\x98\xc3\xef\x8f\x0f\x7f\xc4\xc6\x6a\x26\x2a\x56\xae\xc3\x3e\x43\x04\xa2\xe5\x3c\x82\xd9\x40\xe0\x3e\xb1\xe2\x9a\x55\x75\xdf\x5b\x1f\xb9\x2c\x9e\xc3\x23\xd2\x8b\xd3\x8f\xbb\x73\x86\x65\xc9\x7e\xf2\xde\xfc\x2c\x28\xa5\xb4\xbb\x9f\x05\x5d\x07\x54\x10\xb7\xfa\x2f\x00\x00\xff\xff\x45\x06\x9c\x73\x56\x08\x00\x00")

func templatesHtmlCrosshairHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCrosshairHtml,
		"templates/html/crosshair.html",
	)
}

func templatesHtmlCrosshairHtml() (*asset, error) {
	bytes, err := templatesHtmlCrosshairHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/crosshair.html", size: 2134, mode: os.FileMode(420), modTime: time.Unix(1586195634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586192825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xb1\x6e\xf3\x30\x0c\x84\x77\x3f\x05\xa3\xf9\xb7\xf4\x77\x4b\x01\xcb\x6b\x97\x0e\x7d\x83\x42\x91\x68\x8b\x2e\x2d\x05\x12\x93\x34\x30\xf2\xee\x85\xe3\x06\xed\xdc\x49\x27\x1e\xf1\x1d\x70\x5c\x16\x08\x38\x50\x42\x50\x94\xfc\x7b\x44\x17\x14\xdc\x6e\x4d\xb7\x0b\xd9\xcb\xf5\x88\x10\x65\xe6\xbe\xe9\xd6\x07\xd8\xa5\xd1\x2a\x4c\xaa\x6f\x00\xba\x75\x79\x15\x00\xdd\x8c\xe2\xc0\x47\x57\x2a\x8a\x55\x27\x19\xda\xbd\xfa\xb6\x84\x84\xb1\x7f\x45\x37\x30\x8a\x7e\xc1\x2c\x6e\x7c\x8b\x59\x72\x67\x36\xeb\x17\x21\xb9\x19\xad\x3a\x13\x5e\x8e\xb9\x88\x02\x9f\x93\x60\x12\xab\x2e\x14\x24\xda\x80\x67\xf2\xd8\xde\x3f\xff\x80\x12\x09\x39\x6e\xab\x77\x8c\xf6\xe9\x91\xb7\x6b\xdb\x4d\x30\xa5\x0f\x28\xc8\x56\x55\xb9\x32\xd6\x88\x28\x0a\x62\xc1\xc1\x2a\x63\x7c\x48\x53\xd5\x9e\xf3\x29\x0c\xec\x0a\x6a\x9f\x67\xe3\x26\xf7\x69\x98\x0e\xd5\x44\x1a\x23\xd3\x18\x45\x4f\xd5\x3c\xeb\xbd\xfe\x6f\x36\x8a\x09\x38\xb8\x13\x8b\x9e\x29\x69\x5f\xeb\x23\xb6\xfa\x42\x47\x81\x5a\xfc\xdf\xe8\x3f\xa3\x15\x3c\x55\xd5\x77\x66\x63\x6e\x01\x6d\x7b\xef\xdc\x3c\x4a\xef\x0e\x39\x5c\xfb\x66\x59\x00\x53\x58\x2f\xf6\x15\x00\x00\xff\xff\xce\x39\xb0\x4e\xca\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 458, mode: os.FileMode(420), modTime: time.Unix(1586193498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x4b\x0a\xc3\x30\x0c\x44\xd7\xc9\x29\x06\x1f\xa0\xbe\x80\xea\x4d\x0f\x52\x44\xac\x10\x81\xf3\xc1\x71\x4b\x40\xe4\xee\xc5\x69\xbb\xf2\xee\x21\xcd\x30\xcf\x0c\x51\x46\x5d\x04\x4e\x97\x28\x87\xc3\x79\xf6\x66\x28\x32\x6f\x89\xcb\x75\x1e\x9e\x93\x70\x74\xb8\xd5\x1f\x45\x7d\x87\x1e\x00\xe8\x95\x42\xdf\x51\xd2\x40\x8c\x29\xcb\x78\x77\x7e\xe0\x59\x32\x7b\x17\x1e\x17\x40\x0e\x9e\xb7\x24\xe4\x39\x90\x4f\xda\xe6\xf3\xba\xef\x13\x6b\xae\x95\x3f\x37\xad\xee\xbb\xe7\xeb\x60\xe3\x36\xae\x6b\xf9\xb9\x99\x41\x96\x58\xe9\x13\x00\x00\xff\xff\x6a\x06\xb6\xc2\xd7\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 215, mode: os.FileMode(420), modTime: time.Unix(1586194844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/camera.html": templatesHtmlCameraHtml,
	"templates/html/crosshair.html": templatesHtmlCrosshairHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"camera.html": &bintree{templatesHtmlCameraHtml, map[string]*bintree{}},
			"crosshair.html": &bintree{templatesHtmlCrosshairHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

