// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4f\xc3\x30\x10\x86\xf7\xfc\x8a\xc3\x33\xa1\x62\x63\xb0\xb3\x21\x84\xc4\xc6\xc6\x82\x0e\xfb\x9a\x58\x72\xee\xa2\xe4\xda\xaa\x58\xf9\xef\xc8\x4d\x22\xbe\x3a\xd9\xf7\xf8\x79\xa5\xd7\x97\x33\x04\xda\x47\x26\x30\x91\xfd\x7b\x47\x18\x0c\xcc\x73\x65\x6f\x82\x78\x3d\x0f\x04\x9d\xf6\xa9\xa9\x6c\x39\x20\x21\xb7\xce\x10\x9b\xa6\x02\xb0\x45\x2e\x17\x00\xdb\x93\x22\xf8\x0e\xc7\x89\xd4\x99\x83\xee\xeb\x07\xb3\x3e\x69\xd4\x44\xcd\x13\x89\x62\x6b\x77\xcb\xf4\x23\xc4\xd8\x93\x33\xc7\x48\xa7\x41\x46\x35\xe0\x85\x95\x58\x9d\x39\xc5\xa0\x9d\x0b\x74\x8c\x9e\xea\xcb\x70\x0b\x91\xa3\x46\x4c\xf5\xe4\x31\x91\xbb\x5f\x6a\xec\xb6\x1e\xf6\x43\xc2\x19\x02\x2a\xd6\x9b\x98\x50\xa3\x1e\x02\x39\x93\x33\xdc\x3d\x2f\xf4\x65\x85\x30\xcf\xe6\x8f\x2e\xdc\x5e\xf1\x37\xfa\x3f\xf0\x29\xd2\xff\x72\xdf\x44\xfa\x6f\x6d\x22\x1c\x7d\x57\x13\x87\x41\x62\xf9\x54\x31\x5f\x2f\xf0\x71\x65\x45\x6e\xaa\x9c\x81\x38\x94\xc5\x7f\x05\x00\x00\xff\xff\xb8\xf4\xba\x98\x91\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 401, mode: os.FileMode(420), modTime: time.Unix(1586215562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8f\x9b\x30\x10\x3d\xc3\xaf\x18\xf9\x4e\xa8\xf6\x0c\xdc\xb6\xa7\x4a\x95\x5a\xf5\x5c\x19\x18\x16\x6f\xfd\x41\xed\x21\xda\x08\xed\x7f\xaf\x6c\x93\x04\xb2\xa4\x07\x9a\x5e\x56\xde\x19\xde\xe3\xcd\x7b\xe3\x30\x4d\xd0\x62\x27\x34\x02\x13\xba\xc5\x37\x06\xef\xef\xe9\x34\x01\xa1\x1a\x24\xa7\x50\x6e\x7e\xf6\xc8\x5b\x06\x07\xdf\x2b\xa4\xd0\xbf\xc0\xa2\x2c\x99\xa3\x93\x44\xd7\x23\x12\x03\x3a\x0d\x58\x32\xc2\x37\xca\x1b\xe7\x18\xf4\x16\xbb\x92\xf9\x73\x1e\x78\x0f\xa1\x9a\x57\x3b\xf0\x83\xe4\x0d\xf6\x46\xb6\x68\xaf\x2c\xae\xb1\x62\xa0\x25\xec\x95\x1f\x79\xac\x32\x70\xb6\x29\xd9\xa2\x92\xbf\xa0\x21\xfe\x72\x50\x7c\x70\x87\x57\xc7\xaa\x22\x8f\x8d\xdd\x4c\x0d\x57\x68\xf9\x43\xb9\x84\x16\xf4\x18\xc2\x30\xe6\x06\xdd\x34\x81\xe8\xe0\xf0\xac\x79\x2d\xf1\xeb\xb3\xaa\xb1\x0d\x91\xee\x7b\x8b\x41\x4f\xf0\x18\xc5\x33\xd7\xb6\x66\xd4\xed\xbc\x95\x57\xf5\xdf\x91\xdb\xa6\xff\x07\xf5\xcb\xad\x7a\xc8\x08\x4b\xc2\xbf\xce\x51\xb4\xe2\x08\x8d\xe4\xce\x95\xac\x31\x9a\xb8\xd0\x68\x59\x95\xa6\x00\x00\xdb\x11\xf9\x4e\xec\xaf\xc0\xdc\xb6\x1e\x97\xdc\x16\x33\x7f\x5f\x23\x67\x12\x40\x9d\xb1\xea\xfc\x80\x3f\x67\x42\x4b\xa1\x91\x55\x69\x92\x14\x42\x0f\x23\xad\xba\x5e\x95\x35\x12\x94\xcd\x9c\xca\x9e\xce\xb7\xd3\x05\xcf\x19\x68\xae\xb0\x64\x31\xb2\x6c\xb4\x92\x81\x68\xd7\xff\x2f\xbc\x28\xd9\xb3\x26\xb4\xc0\xe1\xc7\xb7\x2f\x40\x06\x2c\x92\x15\x78\x44\x06\x47\x2e\x47\x2c\x19\x03\x6e\x05\xcf\x24\xaf\xfd\x8f\xc2\x67\xa4\xa6\x67\x79\x50\x56\x8f\x44\x46\x9f\xa5\xd5\xa4\x41\x9d\xb2\x27\xff\xc7\xa9\xec\xd3\x45\xd6\x58\x2b\x41\x2b\x11\x5d\x20\xa9\x02\x57\x91\x47\x9a\x6a\xf6\x22\xf7\x23\x56\x69\x52\xe4\xad\x38\x56\x69\x32\xdb\xb7\x40\x0b\xc5\x5f\x90\xad\x0c\xad\x4d\x7b\xf2\x69\x46\xc8\x07\xbf\x3b\x63\xc8\xfb\x3d\x3f\x10\xdf\x73\x39\x9e\x83\x9d\xf3\xbf\x94\x76\x65\x79\xe7\x16\xfc\xbf\x9c\x17\x59\x66\xbf\x47\xb4\xa7\xe8\xf4\x46\x79\x33\xf5\x50\x0c\x54\x3e\xfc\x48\x0d\x9d\xb1\x77\xe2\x8f\x13\xed\xc9\xbf\x8a\xd0\x7b\x71\x5f\x0c\xbf\x15\x6f\xd1\x8d\x92\xdc\x35\xdd\x75\x5a\x5b\x7b\xa2\xf8\xb0\x6b\x3d\x6e\x54\x74\xc8\x69\xb4\xb8\x00\x6e\xaf\xcf\x7c\xfe\xf0\x55\xf6\xb4\xf3\x57\xf9\xaa\xf7\x4f\x00\x00\x00\xff\xff\x60\xe3\xa2\x04\xd1\x07\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 2001, mode: os.FileMode(420), modTime: time.Unix(1586293210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

