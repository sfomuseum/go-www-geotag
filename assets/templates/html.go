// Code generated by go-bindata.
// sources:
// templates/html/editor.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlEditorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x8f\x9c\x30\x0c\x3d\xc3\xaf\xb0\x72\xcf\xb2\xda\x5e\x81\xdb\xb4\x52\x55\x75\xab\x8e\xaa\x1e\xab\x00\xa6\x13\x29\x1f\x34\x84\x59\x4d\x11\xff\xbd\x4a\x08\x9f\xc3\xce\xa1\x17\x04\x36\x3c\xdb\xcf\xef\x85\xbe\x87\x0a\x6b\xae\x10\x08\x56\xdc\x6a\x43\x60\x18\xe2\xbe\x07\x8b\xb2\x11\xcc\x22\x10\xae\xca\x5f\x17\x64\x15\x81\x27\x97\x4b\x2b\x7e\x85\x52\xb0\xb6\xcd\x48\xa9\x95\x65\x5c\xa1\x21\xc0\xab\x6c\x42\xc8\x63\x00\x00\x7f\xd9\xbc\xcc\x4c\x45\xf2\x38\x8e\xfa\x1e\x78\x0d\xda\xc0\xd3\x49\xb1\x42\xe0\x4f\xc3\x2d\xce\x4f\xdf\x04\x2b\xf1\xa2\x45\x85\x06\x86\x21\x8a\xa3\x3d\x06\x75\xcd\xa0\xf1\x50\xae\xc6\x08\xb7\xc5\x1a\x86\x31\x97\x16\x9d\xb5\x5a\xf9\xee\xde\x7c\x8a\xb6\xec\x8a\x64\xc2\x2b\xac\x82\xc2\x2a\xda\x18\x2e\x99\xb9\x91\xfc\xcc\xae\x98\x26\xe3\x57\xf9\x8c\x8f\xaa\x9a\x21\x0f\x8a\x6e\x5b\x0e\x95\x6b\x6d\xe4\x54\xc6\xdd\x53\xae\x04\x57\x48\xf2\x38\x8a\x52\xae\x9a\xce\x6e\xb2\x8e\x4a\xa3\x05\x48\x43\x5b\x49\x5f\x08\xd8\x5b\x83\x19\x69\x91\x99\xf2\x42\x40\x31\x89\x19\x69\x96\x42\xf4\x4f\x87\xe6\x36\xf2\x7e\x10\x5e\x85\x32\x72\x52\x8e\x13\x36\x06\x3d\x14\x58\x0d\x23\x34\xd4\x6e\xe7\x57\x26\x3a\xcc\x08\x01\x66\x38\xa3\x82\x15\x28\x32\x72\x1e\x6b\x27\xbe\xe3\x40\xe4\x8a\x37\x79\xa3\x2f\xee\xd2\x4a\xfa\x3c\xb7\xdb\x15\x92\x5b\x92\x8f\x9f\xee\x88\x4c\x13\x37\xe9\xf4\xe0\xb6\xba\x6f\xde\x60\xdb\x09\xdb\x92\x3c\x4d\x2a\x7e\xdd\xf3\x1f\xe8\x9f\x72\xcb\x5e\x0e\x34\x52\xe8\xea\x36\x2b\xe4\x58\xb2\xf9\x7d\xd2\xe8\x37\xbf\x9f\x83\x1d\xbf\x9e\x64\x81\xae\x9a\x6f\xc2\x31\xb2\x01\x15\xe3\x26\x4a\x2d\xa8\x46\xf7\xa6\xc7\xd9\xe3\x8f\x29\x3a\x3b\x21\x9a\x59\x08\x19\x2e\xd9\xef\x45\x9d\xf3\x24\xb0\xfa\x30\x8c\x36\xb1\x10\xbd\x83\x4f\x6b\xad\xed\x64\xcc\x10\x97\x68\xd9\x96\xdb\x70\xef\x60\x26\xbc\xbd\xe8\x1f\x8d\x2a\x59\xb3\x9d\xd3\x25\x7c\x70\x01\x7e\xcc\x64\x14\x96\xfa\x1e\x55\x4e\x31\x4b\x89\x47\x9e\xfa\x6f\x53\x85\x4a\x9d\x11\x1b\xb2\xfc\xf3\xa1\x8d\x7e\x7c\xff\xe2\xfc\x63\xd0\x1a\x8e\xee\x30\x39\x74\xcf\x47\xb4\xae\x46\xcb\xff\x62\x46\x3e\x3c\x13\x48\xc6\x2e\xef\x8d\xb4\x3e\x80\xb6\x3e\x5a\xf7\x53\x7b\xbc\xdc\xc3\x82\xd7\xc9\xca\x5e\x5b\x7f\xad\x57\x1b\xed\xcf\xb0\xfd\xa6\x0f\xe4\xb0\x33\xda\x81\xbd\x36\xe2\xea\x6c\xd3\xd9\xc5\x4e\x68\x19\x17\xad\x97\x66\xdb\x49\x37\x55\xfe\x09\xf5\xe7\xf3\xeb\xd7\x34\x99\x02\x6b\xe9\xd7\xc8\x6c\x67\xf0\x4e\x98\x33\x4e\x88\xaf\x1a\xf4\xfd\x85\xfb\xbb\x7f\x95\xeb\x2d\xfc\xab\x96\xb1\xff\x05\x00\x00\xff\xff\x38\x43\x8f\x4f\xe8\x06\x00\x00")

func templatesHtmlEditorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlEditorHtml,
		"templates/html/editor.html",
	)
}

func templatesHtmlEditorHtml() (*asset, error) {
	bytes, err := templatesHtmlEditorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/editor.html", size: 1768, mode: os.FileMode(420), modTime: time.Unix(1589996346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x8a\xc1\x67\x9a\x88\x1b\x87\xb8\x17\x54\x21\x24\x24\xf6\x86\xc4\x05\x4d\xed\x49\xe2\xc5\xb1\x83\x3d\xdb\x6e\x89\xfa\xee\xc8\xf9\xb3\xcd\x2e\xad\x84\xda\x9c\x1a\x8f\xbf\xf9\x3c\xf3\x93\x3b\xee\x3a\xd0\x54\x1a\x47\x20\x8c\x53\x3f\x6b\x42\x2d\xe0\x74\x5a\x15\xef\xb4\x57\x7c\x6c\x09\x6a\x6e\xec\x66\x55\xa4\x1f\xb0\xe8\x2a\x29\xc8\x89\xcd\x0a\xa0\x48\xe2\xf4\x01\x50\x34\xc4\x08\xaa\xc6\x10\x89\xa5\x78\xe2\x72\xfd\x51\x8c\x5b\x6c\xd8\xd2\xe6\x33\x79\xc6\xaa\xc8\x87\xd5\x2c\xc9\x61\x43\x52\xec\x0d\x1d\x5a\x1f\x58\x80\xf2\x8e\xc9\xb1\x14\x07\xa3\xb9\x96\x9a\xf6\x46\xd1\xba\x5f\xbc\x07\xe3\x0c\x1b\xb4\xeb\xa8\xd0\x92\xfc\x30\x1d\x11\x55\x30\x2d\x43\x2a\x57\x0a\xa6\x67\xce\x1f\x71\x8f\x43\x54\x40\x0c\x4a\x8a\x59\x24\x3f\xd4\x3e\x7a\x57\x9a\x10\x39\x73\xc4\xd9\x63\x14\x9b\x22\x1f\x36\x07\xc7\xae\x03\x53\x02\xfd\x86\xec\x01\x2b\xfa\x94\x4a\x7a\x66\x10\x5b\x6d\xd8\x87\x9e\xcf\x2d\xe7\x56\x3d\x83\xac\xc1\x36\x5e\x38\xf3\x46\x37\x85\x0d\x05\xbc\xe4\x67\x8d\xfb\x05\x81\xac\x14\x91\x8f\x96\x62\x4d\xc4\x62\x6e\xaf\x62\x14\x50\x07\x2a\xa5\x48\xdf\x39\xf5\xed\x65\x7d\x38\x9f\x83\xc8\xb6\x0e\x77\x96\xbe\x6d\x9b\x1d\xe9\x3b\xbb\xf7\x94\x4c\x96\xeb\x7f\xf4\x4b\x37\x63\x11\x08\xa3\xdf\x1b\x08\xe4\x5e\xfa\x7e\x85\xe4\xc1\xa2\xa2\xda\x5b\x4d\xe1\x4e\x2e\xed\xd9\x69\x39\x38\x73\xd3\xc5\x08\xcd\x4d\xff\x13\xd3\xf7\x60\xf8\x6e\x42\xd8\x9a\xe5\xc8\x1c\xfa\x8a\x16\xf7\x5b\x0c\xf2\xe8\x77\x9d\xef\x7d\xe3\xe2\x5a\x9d\xb7\x99\x8e\x83\xe3\x8a\xe9\xbc\xee\x22\x9f\x1e\x8d\x62\xe7\xf5\x11\x34\x32\xae\xa7\xa9\x6e\x91\x0d\x3f\x69\x92\xa2\xeb\x20\xfb\x32\x44\xbf\x8e\x41\x38\x9d\xc4\x1b\xb9\x77\xd5\x05\xfd\x14\xfd\x37\xe1\x8f\xf7\xcd\x2b\xed\x0f\xef\x9b\xb3\x6c\x76\xaf\xd7\xe4\x74\xeb\x4d\x7a\x86\x92\x7c\xf6\x2f\xdf\x8e\x1b\xe7\xb4\x61\x60\xbc\x64\xc4\x21\x65\x98\x95\x93\x3a\x26\xf9\x66\x75\x26\xf1\x37\x00\x00\xff\xff\x4e\xd7\xf6\x5d\x77\x07\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1911, mode: os.FileMode(420), modTime: time.Unix(1588960763, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/editor.html": templatesHtmlEditorHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"editor.html": &bintree{templatesHtmlEditorHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

