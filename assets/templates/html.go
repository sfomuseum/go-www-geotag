// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd1\xbd\x6a\xc3\x30\x10\x07\xf0\xdd\x4f\x71\xd5\x5c\x37\x74\xeb\x20\x79\x0b\xa5\x50\xe8\xd0\xad\x4b\xb9\x48\x17\x5b\x20\xe9\x8c\x7d\x49\x48\x85\xdf\xbd\x28\xb6\x9b\x7e\x4d\xd2\xfd\xf5\x3b\x38\x71\x39\x83\xa3\xbd\x4f\x04\xca\x27\xfb\xde\x11\x3a\x05\xd3\x54\xe9\x1b\xc7\x56\xce\x3d\x41\x27\x31\x34\x95\x2e\x07\x04\x4c\xad\x51\x94\x54\x53\x01\xe8\x82\xcb\x05\x40\x47\x12\x04\xdb\xe1\x30\x92\x18\x75\x90\x7d\xfd\xa0\x96\x27\xf1\x12\xa8\x79\x24\x16\x6c\xf5\x66\xae\xbe\x35\x25\x8c\x64\xd4\xd1\xd3\xa9\xe7\x41\x14\x58\x4e\x42\x49\x8c\x3a\x79\x27\x9d\x71\x74\xf4\x96\xea\x4b\x71\x0b\x3e\x79\xf1\x18\xea\xd1\x62\x20\x73\x3f\x8f\xb1\x59\xe7\xd0\x3b\x76\x67\x70\x28\x58\xaf\x30\xa0\x78\x39\x38\x32\x2a\x67\xb8\x7b\x9a\xd3\xe7\x25\x84\x69\x52\xbf\x38\xa7\xf6\x1f\xbf\xa6\x7f\x1b\x3e\x98\xe3\x0f\xfb\xc6\x1c\xaf\x6c\x24\x1c\x6c\x57\x53\x72\x3d\xfb\xf2\xa9\x22\x5f\x2f\xe1\x76\xc9\xae\x98\x29\xee\xc8\x7d\xe1\x71\xd6\x2f\xdb\x92\xae\x7a\x2c\xbc\xa9\x72\x06\x4a\xae\xec\xe9\x33\x00\x00\xff\xff\x0b\xd3\xd5\xe3\xc0\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 448, mode: os.FileMode(420), modTime: time.Unix(1586296537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x41\x8f\x9b\x3c\x10\x3d\x93\x5f\x31\x9a\x3b\x61\xb5\xdf\x15\xb8\xed\x77\xaa\x54\xa9\x55\xcf\xd5\x00\xc3\xc6\x5b\xdb\x50\x7b\x88\x36\x8d\xf6\xbf\x57\xc6\x24\x81\x5d\xd2\x43\x9a\x5e\x22\x67\x26\xef\xf1\x66\xde\x73\x38\x1e\xa1\xe1\x56\x59\x06\x54\xb6\xe1\x57\x84\xb7\xb7\xcd\xf1\x08\xc2\xa6\xd7\x24\x63\xb9\xfe\xbe\x63\x6a\x10\xb6\xa1\x97\x6b\x65\x7f\x80\x63\x5d\xa0\x97\x83\x66\xbf\x63\x16\x04\x39\xf4\x5c\xa0\xf0\xab\x64\xb5\xf7\x08\x3b\xc7\x6d\x81\xe1\x9c\x8d\xbc\xdb\xb1\x9a\x95\x37\xe0\x7b\x4d\x35\xef\x3a\xdd\xb0\xbb\xb0\xf8\xda\xa9\x5e\xe6\xb0\x17\xda\x53\xac\x22\x78\x57\x17\x38\xab\x64\xcf\xdc\x09\x3d\x6f\x0d\xf5\x7e\xfb\xe2\xb1\xcc\xb3\xd8\xb8\x99\xa9\x26\xc3\x8e\xee\xca\xa5\xac\x92\xfb\x10\x8e\x63\xae\xd0\x1d\x8f\xa0\x5a\xd8\x3e\x59\xaa\x34\x7f\x7e\x32\x15\x37\xa3\xa5\xb7\x3d\xa5\xe3\x40\x70\x1f\xc5\x13\xd7\xba\x66\xb6\xcd\x94\xca\x8b\xfa\xaf\x4c\xae\xde\xfd\x85\xfa\x79\xaa\xee\x32\xc2\x9c\xf0\x8f\x73\xe4\x8d\xda\x43\xad\xc9\xfb\x02\xeb\xce\x0a\x29\xcb\x0e\xcb\xcd\x06\x00\x60\xdd\xa2\xd0\x89\xfd\x05\x98\x5c\x13\x70\xc9\xfb\x62\x1a\xee\x6b\xe4\x4c\x46\x50\xdb\x39\x73\xfa\x41\x38\xa7\xca\x6a\x65\x19\xcb\x4d\x92\xe4\xca\xf6\x83\x2c\xba\x41\x95\xeb\x34\x18\x97\x7a\x93\x3e\x9e\x6e\xa7\x1f\x77\x8e\x60\xc9\x70\x81\xd1\xb2\x74\x70\x1a\x41\x35\xcb\xef\xb3\x5d\x14\xf8\x64\x85\x1d\x10\x7c\xfb\xf2\x09\xa4\x03\xc7\xe2\x14\xef\x19\x61\x4f\x7a\xe0\x02\x11\xc8\x29\x4a\x35\x55\xe1\x4f\xe1\x7f\x96\xf0\x0c\xaf\x7e\x71\x81\xff\x3d\x8c\xb7\x3d\x49\xf2\x6a\x10\xe9\xec\x49\x65\x25\x16\xcc\x21\x7d\x0c\x1f\xde\xa4\x0f\x67\x85\x43\x65\x94\x2c\xf4\xb4\x23\x5f\x39\xd2\xe6\x59\xa4\x29\xa7\xb5\x64\x61\xda\x72\x93\xe4\x59\xa3\xf6\xe5\x26\x99\x36\x39\x43\x2b\x43\xcf\x8c\x8b\xdd\x56\x5d\x73\x08\xc6\x46\xc8\x87\xd5\xb7\x5d\x27\xec\x16\x12\x0c\x0b\x9d\x11\xf1\xc1\xe7\xe3\xc9\xf4\x29\x1b\xe7\xd2\x4d\x3e\x5f\xb9\x21\xff\x2e\x03\x33\x9f\xd3\x9f\x03\xbb\x43\x9c\x7b\xa5\xbc\x9a\x88\xb1\x38\x52\x85\x60\x44\x6a\x68\x3b\x77\x25\x1a\x71\x22\xbc\x21\x10\x65\x84\x5e\xf3\xff\xbc\xf0\xf7\xe2\x1d\xfb\x41\x8b\xbf\xd8\xbd\x74\x6b\x2d\x38\x86\xfa\x5b\xf2\xf2\x5e\x45\xcb\x24\x83\xe3\x19\x70\x3d\x3e\xd3\xf9\xc3\x1b\x3b\xd0\x4e\x6f\xec\x8b\xde\xdf\x01\x00\x00\xff\xff\x39\x98\x64\x7d\xed\x07\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 2029, mode: os.FileMode(420), modTime: time.Unix(1586294758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html":    templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html":    &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
