// Code generated by go-bindata.
// sources:
// templates/html/editor.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlEditorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x41\x8f\x9b\x3c\x10\x3d\x93\x5f\x31\xf2\x9d\xb0\xda\xef\x0a\xdc\xf6\xab\x54\x55\xdd\xaa\xab\xaa\xc7\x6a\x80\x61\xe3\xad\x6d\xa8\x3d\xa4\x4d\xa3\xfd\xef\x95\x31\x09\x90\x25\xaa\x94\xa4\x97\xc8\x19\x33\xcf\x6f\xde\x3c\x8f\xbc\xdf\x43\x45\xb5\x34\x04\x82\x2a\xc9\x8d\x15\xf0\xfa\xba\xda\xef\x81\x49\xb7\x0a\x99\x40\x48\x53\x7e\xdb\x10\x56\x02\xd6\x7e\x2f\x75\xa5\x95\x2d\x03\xef\x5a\xca\x04\xd3\x2f\x4e\x5e\x70\x8b\x21\x2a\xc0\xd9\x32\x13\x93\x48\xf2\x4c\x0d\xe3\xf3\x5a\x63\xeb\xd6\x2f\x4e\xe4\x69\x12\x36\xf2\x4b\x91\x4a\xd4\x64\xf1\x4a\x2c\x45\x58\x2b\xe2\xb5\xc2\x1d\x59\xb7\x2e\x1b\xc3\xb6\x51\xa7\xa0\x4a\x9a\xef\x60\x49\x65\xc2\xf1\x4e\x91\xdb\x10\xb1\x98\x9e\x51\x3a\x27\x60\x63\xa9\xce\x84\x5f\x9f\x83\xed\x3f\x4b\x2e\x01\x0c\x4d\x39\x02\xec\xf7\x20\x6b\x58\x3f\x18\x2c\x14\x3d\x3e\xe8\x82\xaa\x2b\x7a\xd2\x90\x07\xb8\x4d\x57\x06\x2c\x69\x24\x5f\xad\xe2\x80\x35\x29\x9a\x4c\x35\xf8\x72\x2c\xff\x93\xc2\x92\x36\x8d\xaa\xc8\x5e\xa1\x41\x3b\xa2\xdc\x46\x88\x29\xe0\x4d\xd4\x98\x02\xfe\x45\x92\xaf\x56\xf2\x55\x6a\x60\x2b\x6f\xa3\xc2\xcf\x9e\xc9\x4d\xb1\x6e\x22\xe6\x80\xf5\x56\xc7\xeb\x86\xd1\x12\xb7\xcb\x00\x87\x0b\xbf\x04\x58\xc9\x2d\x94\x0a\x9d\xcb\x84\x1f\x2c\x28\x0d\x59\x91\xaf\x56\x00\x00\xcb\x83\xc1\xef\x84\xfd\x59\x32\xda\xca\xe7\x45\xa7\xc1\xd8\x8f\xf9\x80\x19\xf5\x49\x75\x63\xf5\xe1\x03\xbf\x8e\xa5\x51\xd2\x90\xc8\x57\x51\x94\x4a\xd3\x76\x3c\xdb\x1d\xc6\x1d\x68\x1b\x3b\x1d\xdf\x1f\x1a\xe1\x08\x6d\xb9\x11\x60\x50\x53\x26\xc2\xe5\x8e\x3b\xab\x04\xc8\x6a\xfe\x7f\x62\xf5\x4c\x3c\x18\xef\x65\x84\x2f\x9f\x3f\x00\x37\x60\x89\xad\xa4\x2d\x09\xd8\xa2\xea\x28\x13\x02\xd0\x4a\x8c\x15\x16\xbe\xff\xff\x13\xfb\x33\x9c\xfc\x4d\x99\xf8\xef\xae\xef\x6e\x14\xa5\x45\xc7\xdc\x98\x03\xcb\x82\x0d\xe8\x5d\x7c\xef\x7f\x9c\x8e\xef\x8e\x0c\xbb\x42\x4b\x9e\xf1\xa9\x7b\xbc\xbc\x87\x4d\x93\x00\x93\x0f\xb2\x24\xbe\xda\x7c\x15\xa5\x49\x25\xb7\xf9\x2a\x1a\x94\x9c\x64\x4b\x8d\xcf\x24\x66\xda\x16\x4d\xb5\xf3\xed\x0c\x29\x6f\xa4\xaf\x9b\x86\xc9\xce\x28\x68\x62\x3c\x66\x84\x83\x8f\xcb\x43\xd3\x07\xf7\x1e\x43\x17\xf5\xf9\xcc\x0c\x09\xc5\x0e\x0a\x7a\x5e\xe1\xf2\xc4\x0e\xb7\x63\x6d\x5e\xd2\x82\x4d\xdc\x5a\xa9\xd1\xee\x44\xfe\x84\x5b\x3a\x11\x6c\xe4\xd9\xff\x5d\x38\xf4\x64\x96\xff\x3b\xf7\x4d\x1c\x16\xff\xe8\xc8\xee\x82\xe2\x0b\xe1\x45\x2f\xf6\xc1\x1e\xca\x5b\x32\x40\x43\xed\x5f\x4d\x8b\xa6\x7c\x0a\x67\x5f\x60\xc5\x3c\xa4\x9e\x73\xde\xb1\xd5\xa7\xe4\x2d\xb9\x4e\xb1\x1b\x8d\x36\xd3\x7f\x90\x7f\xc1\xb7\x1a\xdb\xcb\xed\xda\x71\xdb\xb1\x38\xd2\x22\x46\xa9\x5c\x5f\xb3\xeb\xb4\x77\x45\xfe\x8e\x9a\xf7\x4f\x8f\x1f\xd3\xe4\x10\xf0\x9b\x87\xb3\x6b\x42\xee\x2c\xcd\x39\xa7\xc9\x88\x73\xe6\x0a\x0c\xeb\x37\x8f\x55\xcf\x6d\x78\xac\x8e\xce\xfb\x13\x00\x00\xff\xff\x25\xa4\xd3\x98\xe9\x0a\x00\x00")

func templatesHtmlEditorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlEditorHtml,
		"templates/html/editor.html",
	)
}

func templatesHtmlEditorHtml() (*asset, error) {
	bytes, err := templatesHtmlEditorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/editor.html", size: 2793, mode: os.FileMode(420), modTime: time.Unix(1586898678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x3f\x6f\xe3\x30\x0c\xc5\x77\x7f\x0a\x1e\xe7\x73\x8c\xdb\x6e\xb0\xbc\x05\x45\x81\x02\xed\xdc\xa5\x60\x24\x26\x56\x20\x8b\x86\xc5\x24\x4d\x0d\x7f\xf7\x42\x75\xdc\xa4\x7f\x26\x89\xef\xfd\x9e\x28\x0a\x1a\x47\x70\xbc\xf5\x91\x01\x7d\xb4\x2f\x2d\x93\x43\x98\xa6\xa2\xfe\xe3\xc4\xea\xb9\x67\x68\xb5\x0b\x4d\x51\xe7\x05\x02\xc5\x9d\x41\x8e\xd8\x14\x00\x75\x86\xf3\x06\xa0\xee\x58\x09\x6c\x4b\x43\x62\x35\x78\xd0\x6d\xf9\x1f\x2f\x96\x7a\x0d\xdc\xdc\xb1\x28\xed\xea\x6a\xae\x6e\x42\x91\x3a\x36\x78\xf4\x7c\xea\x65\x50\x04\x2b\x51\x39\xaa\xc1\x93\x77\xda\x1a\xc7\x47\x6f\xb9\xfc\x28\xfe\x82\x8f\x5e\x3d\x85\x32\x59\x0a\x6c\xfe\x2d\x2d\x92\x1d\x7c\xaf\x90\xaf\x6b\x50\xf9\x55\xab\x3d\x1d\x69\x56\x11\xd2\x60\x0d\xde\x28\xd5\xa9\x95\x24\x71\xeb\x87\xa4\xab\xc8\xba\xda\x27\x6c\xea\x6a\x36\x9b\x7c\x60\x1e\xae\x5a\xa6\xab\x37\xe2\xce\xe0\x48\xa9\x5c\xda\x07\x52\xaf\x07\xc7\x06\xc7\x11\x56\xf7\xb3\xfa\x70\x11\x61\x9a\xf0\x1b\x2e\x71\xf7\x0b\xbf\xa8\x3f\x03\x6f\x22\xdd\x17\xf6\x59\xa4\xbb\x62\x7d\x20\xcb\xad\x04\xc7\x43\xc9\xd1\xf5\xe2\xf3\x7b\x65\xfc\xe9\xea\xac\x2f\xc6\x35\x26\xdc\x6d\xd8\x7d\x26\xd2\x1c\x79\x5c\x67\x75\xa1\x53\xc6\x9b\x62\x1c\x81\xa3\xcb\xff\xe0\x3d\x00\x00\xff\xff\x2e\xf7\xe5\x06\x20\x02\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 544, mode: os.FileMode(420), modTime: time.Unix(1586471433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/editor.html": templatesHtmlEditorHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"editor.html": &bintree{templatesHtmlEditorHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

