// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4f\xc3\x30\x10\x86\xf7\xfc\x8a\xc3\x33\xa1\x62\x63\xb0\xb3\x21\x84\xc4\xc6\xc6\x82\x0e\xfb\x9a\x58\x72\xee\xa2\xe4\xda\xaa\x58\xf9\xef\xc8\x4d\x22\xbe\x3a\xd9\xf7\xf8\x79\xa5\xd7\x97\x33\x04\xda\x47\x26\x30\x91\xfd\x7b\x47\x18\x0c\xcc\x73\x65\x6f\x82\x78\x3d\x0f\x04\x9d\xf6\xa9\xa9\x6c\x39\x20\x21\xb7\xce\x10\x9b\xa6\x02\xb0\x45\x2e\x17\x00\xdb\x93\x22\xf8\x0e\xc7\x89\xd4\x99\x83\xee\xeb\x07\xb3\x3e\x69\xd4\x44\xcd\x13\x89\x62\x6b\x77\xcb\xf4\x23\xc4\xd8\x93\x33\xc7\x48\xa7\x41\x46\x35\xe0\x85\x95\x58\x9d\x39\xc5\xa0\x9d\x0b\x74\x8c\x9e\xea\xcb\x70\x0b\x91\xa3\x46\x4c\xf5\xe4\x31\x91\xbb\x5f\x6a\xec\xb6\x1e\xf6\x43\xc2\x19\x02\x2a\xd6\x9b\x98\x50\xa3\x1e\x02\x39\x93\x33\xdc\x3d\x2f\xf4\x65\x85\x30\xcf\xe6\x8f\x2e\xdc\x5e\xf1\x37\xfa\x3f\xf0\x29\xd2\xff\x72\xdf\x44\xfa\x6f\x6d\x22\x1c\x7d\x57\x13\x87\x41\x62\xf9\x54\x31\x5f\x2f\xf0\x71\x65\x45\x6e\xaa\x9c\x81\x38\x94\xc5\x7f\x05\x00\x00\xff\xff\xb8\xf4\xba\x98\x91\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 401, mode: os.FileMode(420), modTime: time.Unix(1586215562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4d\x72\xa3\x30\x10\x85\xd7\xf6\x29\xba\x7a\x8f\x99\xc9\x72\x06\xd8\xe5\x04\x73\x80\xa9\x06\x1a\x5b\x19\xfd\x30\x52\x43\xc5\x45\xe5\xee\x29\x49\xc6\xc6\x49\x56\x29\x6f\x6c\xf1\x54\xef\xe3\x75\xb7\xd0\xb2\x40\xcf\x83\xb2\x0c\xa8\x6c\xcf\xaf\x08\x6f\x6f\xfb\x65\x01\x61\x33\x6a\x92\x24\x77\x7f\x4f\x4c\x3d\xc2\x21\xee\x55\x5a\xd9\x7f\xe0\x59\xd7\x18\xe4\xac\x39\x9c\x98\x05\x41\xce\x23\xd7\x28\xfc\x2a\x65\x17\x02\xc2\xc9\xf3\x50\x63\x5c\x97\x89\x7b\x48\x6a\xd9\x7c\xc3\x3f\x6a\xea\xf8\xe4\x74\xcf\xfe\x46\x09\x9d\x57\xa3\x6c\x6d\x2f\x34\x53\x56\x11\x82\xef\x6a\xdc\x28\xe5\x91\x9d\xd0\xf1\x60\x68\x0c\x87\x97\x80\x4d\x55\xe6\x8d\x6f\x93\x3a\x32\xec\xe9\x31\xac\x6d\x81\x8f\x0c\xa7\xac\x92\xc7\x00\x53\xdf\x1e\x87\xdb\x16\xfc\x15\xb5\x57\x33\x74\x9a\x42\xa8\xb1\x73\x56\x48\x59\xf6\xd8\xec\xf7\x00\x00\x95\xa5\x19\xd2\xc9\xa9\xd1\x90\x3f\x2a\x5b\x88\x1b\x7f\xfd\xf4\x6c\x7e\x5f\x9e\x5b\x27\xe2\x4c\x96\xb0\xc9\xae\xd2\xd2\xbc\x12\xb6\x78\xf2\x7d\x24\xef\x3e\x8a\x45\x3c\xf2\xf9\xad\xbb\x68\x5a\x16\x50\x03\x1c\x9e\x2d\xb5\x9a\xff\x30\xf9\xee\x14\xbf\x86\xb4\x57\x0d\xce\x9b\xd5\x1c\xd7\x85\xb2\x5a\x59\xc6\x66\xbf\xdb\x55\xca\x8e\x93\xdc\xed\xc6\x9a\xbc\xd3\x60\x7c\x11\x4c\xf1\xb4\x1e\xfe\x90\xa8\x08\x96\x0c\xd7\xb8\xe9\x51\xf1\x7f\x62\x7f\x46\x50\xfd\x97\xf2\x46\xaa\xf1\xd9\x0a\x7b\xa0\x2c\x26\x14\x88\x83\x8c\x86\xc1\x79\x84\x99\xf4\xc4\x35\x22\x90\x57\x54\x68\x6a\xe3\xa7\x98\x2b\xc2\x32\x25\x6e\x27\x11\x67\xd7\xc8\xad\x58\x30\xe7\xe2\x29\xfe\x04\x53\xfc\xb8\xc6\x9d\x5a\xa3\x04\x9b\x6c\xad\xca\xec\x6a\x2e\x2d\x29\x63\xa5\xeb\x43\xec\xed\xc7\xf0\x9e\xc3\xa4\x25\xcd\xbd\x57\x73\x73\xed\x32\xdb\x3e\x35\x76\x95\x2f\xa3\x89\x76\x43\x23\xde\xcd\xa8\x75\xfd\xf9\x06\xf8\x34\xc2\xc1\x39\x49\x23\xbc\x4f\x31\x30\xc9\xe4\x79\x63\xcc\xff\x39\xf7\x75\xb9\xbf\xac\x3f\x5d\x86\x11\x7b\xb9\x0c\x6f\x79\xdf\x03\x00\x00\xff\xff\x5f\xde\x92\x1f\x48\x05\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 1352, mode: os.FileMode(420), modTime: time.Unix(1586282400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

