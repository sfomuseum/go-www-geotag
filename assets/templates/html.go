// Code generated by go-bindata.
// sources:
// templates/html/editor.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlEditorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xc1\x6e\xdb\x38\x10\x3d\xcb\x5f\x41\xcc\x5d\x56\x90\xbd\x4a\xba\x65\x17\x58\x2c\x36\x45\x83\xa2\xc7\x62\x24\x8d\x62\xa6\x24\xa5\x92\x23\xb5\xae\x91\x7f\x2f\x28\xca\x96\xe4\x28\x28\x60\xbb\x17\x83\x9a\xf1\x3c\xbe\x79\xf3\x48\xf0\x70\x10\x15\xd5\xd2\x90\x00\xaa\x24\x37\x16\xc4\xeb\xeb\xe6\x70\x10\x4c\xba\x55\xc8\x24\x40\x9a\xf2\xcb\x8e\xb0\x02\xb1\xf5\xb9\xd4\x95\x56\xb6\x2c\x78\xdf\x52\x06\x4c\x3f\x38\x79\xc1\x1e\x43\x14\x84\xb3\x65\x06\xb3\x48\xf2\x4c\x0d\xe3\xf3\x56\x63\xeb\xb6\x2f\x0e\xf2\x34\x09\x89\xfc\x52\xa4\x12\x35\x59\x3c\xc7\x52\xd2\x7c\x15\x96\x54\x06\x8e\xf7\x8a\xdc\x8e\x88\x61\x0e\x5d\x3a\x07\x62\x67\xa9\xce\xc0\xaf\x93\xd0\xee\x76\x08\x27\xb9\x6f\x59\xd6\x62\xfb\x60\xb0\x50\xf4\xf8\xa0\x0b\xaa\xae\xe8\xb6\x21\x0f\x70\x9b\x7e\x47\x2c\x69\x24\x5f\xdd\xf4\x88\x35\x6b\x9a\x4c\x35\x4e\x7c\x6a\xff\x83\xc2\x92\x76\x8d\xaa\xc8\x5e\xa1\x41\x3b\xa1\xdc\x46\x88\x39\xe0\x4d\xd4\x98\x03\xfe\x46\x92\xcf\x56\xf2\x55\x6a\x60\x2b\x6f\xa3\xc2\xf7\x81\xc9\x4d\xb1\x6e\x22\xe6\x88\xf5\x56\xc7\xeb\x8e\xf9\x1a\xb7\xcb\x00\xc7\x03\xbf\x06\x58\xc9\x5e\x94\x0a\x9d\xcb\xa0\x6c\x0c\xa3\x34\x64\x21\xdf\x6c\x84\x10\x62\xfd\x62\xf0\x99\x90\x5f\x14\xa3\xad\x7c\x5d\x74\x1e\x8c\xfd\x05\x1a\x30\xa3\xa1\xa8\x6e\xac\x3e\xfe\xc1\xaf\x63\x69\x94\x34\x04\xf9\x26\x8a\x52\x69\xda\x8e\x17\x59\xcf\xca\x36\x4a\x68\x1b\x3b\x1d\xdf\x1f\x07\xe1\x08\x6d\xb9\x03\x61\x50\x53\x06\xe1\x70\xc7\x9d\x55\x20\x64\xb5\xfc\x9e\x59\x3d\x83\x07\xe3\xbd\x8c\xe2\xd3\xc7\xff\x04\x37\xc2\x12\x5b\x49\x3d\x81\xe8\x51\x75\x94\x01\x08\xb4\x12\x63\x85\x85\x9f\xff\xdf\xc4\x7e\x0f\x27\x7f\x52\x06\x7f\xdd\x0d\xd3\x8d\xa2\xb4\xe8\x98\x1b\x73\x64\x59\xb0\x11\x7a\x1f\xdf\xfb\x1f\xa7\xe3\xbb\x13\xc3\xae\xd0\x92\x17\x7c\xea\x01\x2f\x1f\x60\xd3\x24\xc0\xe4\xa3\x2c\x89\xef\x36\xdf\x44\x69\x52\xc9\x3e\xdf\x44\xa3\x92\xb3\x6a\xa9\xf1\x99\x60\xa1\x6d\xd1\x54\x7b\x3f\xce\x50\xf2\x46\xfa\xba\x69\x98\xec\x82\x82\x26\xc6\x53\x45\xd8\xf8\xb4\x3c\x0e\x7d\x74\xef\x29\x74\xd1\x9c\xdf\xb9\x43\x42\xb3\xa3\x82\x9e\x57\x38\x3c\xb1\xc3\x7e\xea\xcd\x4b\x5a\xb0\x89\x5b\x2b\x35\xda\x3d\xe4\x4f\xd8\xd3\x99\x60\x13\xcf\xe1\x73\x65\xd3\xb3\xbb\xfc\xcf\xb9\x6f\xe6\xb0\xf8\x5b\x47\x76\x1f\x14\x5f\x09\xaf\x7a\x71\x08\x0e\x50\xde\x92\x01\x5a\xd4\xfe\x3d\xb2\x6a\xca\xa7\xb0\xf7\x05\x56\xcc\x43\xe9\x7b\xce\x3b\x8d\xfa\x9c\xbc\x25\xd7\x29\x76\x93\xd1\x16\xfa\x8f\xf2\xaf\xf8\x56\x63\x7b\xb9\x5d\x3b\x6e\x3b\x86\x13\x2d\x62\x94\xca\x0d\x3d\xbb\x4e\x7b\x57\xe4\xff\x50\xf3\xef\xd3\xe3\xff\x69\x72\x0c\xf8\xe4\x71\xef\x9a\x90\x3b\x4b\x4b\xce\x69\x32\xe1\xbc\x73\x04\xc6\xf5\x9b\x67\xa0\xe7\x36\x3e\x03\x27\xe7\xfd\x0a\x00\x00\xff\xff\xec\xa9\x34\x80\x43\x0a\x00\x00")

func templatesHtmlEditorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlEditorHtml,
		"templates/html/editor.html",
	)
}

func templatesHtmlEditorHtml() (*asset, error) {
	bytes, err := templatesHtmlEditorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/editor.html", size: 2627, mode: os.FileMode(420), modTime: time.Unix(1586899387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x3f\x6f\xe3\x30\x0c\xc5\x77\x7f\x0a\x1e\xe7\x73\x8c\xdb\x6e\xb0\xbc\x05\x45\x81\x02\xed\xdc\xa5\x60\x24\x26\x56\x20\x8b\x86\xc5\x24\x4d\x0d\x7f\xf7\x42\x75\xdc\xa4\x7f\x26\x89\xef\xfd\x9e\x28\x0a\x1a\x47\x70\xbc\xf5\x91\x01\x7d\xb4\x2f\x2d\x93\x43\x98\xa6\xa2\xfe\xe3\xc4\xea\xb9\x67\x68\xb5\x0b\x4d\x51\xe7\x05\x02\xc5\x9d\x41\x8e\xd8\x14\x00\x75\x86\xf3\x06\xa0\xee\x58\x09\x6c\x4b\x43\x62\x35\x78\xd0\x6d\xf9\x1f\x2f\x96\x7a\x0d\xdc\xdc\xb1\x28\xed\xea\x6a\xae\x6e\x42\x91\x3a\x36\x78\xf4\x7c\xea\x65\x50\x04\x2b\x51\x39\xaa\xc1\x93\x77\xda\x1a\xc7\x47\x6f\xb9\xfc\x28\xfe\x82\x8f\x5e\x3d\x85\x32\x59\x0a\x6c\xfe\x2d\x2d\x92\x1d\x7c\xaf\x90\xaf\x6b\x50\xf9\x55\xab\x3d\x1d\x69\x56\x11\xd2\x60\x0d\xde\x28\xd5\xa9\x95\x24\x71\xeb\x87\xa4\xab\xc8\xba\xda\x27\x6c\xea\x6a\x36\x9b\x7c\x60\x1e\xae\x5a\xa6\xab\x37\xe2\xce\xe0\x48\xa9\x5c\xda\x07\x52\xaf\x07\xc7\x06\xc7\x11\x56\xf7\xb3\xfa\x70\x11\x61\x9a\xf0\x1b\x2e\x71\xf7\x0b\xbf\xa8\x3f\x03\x6f\x22\xdd\x17\xf6\x59\xa4\xbb\x62\x7d\x20\xcb\xad\x04\xc7\x43\xc9\xd1\xf5\xe2\xf3\x7b\x65\xfc\xe9\xea\xac\x2f\xc6\x35\x26\xdc\x6d\xd8\x7d\x26\xd2\x1c\x79\x5c\x67\x75\xa1\x53\xc6\x9b\x62\x1c\x81\xa3\xcb\xff\xe0\x3d\x00\x00\xff\xff\x2e\xf7\xe5\x06\x20\x02\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 544, mode: os.FileMode(420), modTime: time.Unix(1586471433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/editor.html": templatesHtmlEditorHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"editor.html": &bintree{templatesHtmlEditorHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

