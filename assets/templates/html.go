// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4f\xc3\x30\x10\x86\xf7\xfc\x8a\xc3\x33\xa1\x62\x63\xb0\xb3\x21\x84\xc4\xc6\xc6\x82\x0e\xfb\x9a\x58\x72\xee\xa2\xe4\xda\xaa\x58\xf9\xef\xc8\x4d\x22\xbe\x3a\xd9\xf7\xf8\x79\xa5\xd7\x97\x33\x04\xda\x47\x26\x30\x91\xfd\x7b\x47\x18\x0c\xcc\x73\x65\x6f\x82\x78\x3d\x0f\x04\x9d\xf6\xa9\xa9\x6c\x39\x20\x21\xb7\xce\x10\x9b\xa6\x02\xb0\x45\x2e\x17\x00\xdb\x93\x22\xf8\x0e\xc7\x89\xd4\x99\x83\xee\xeb\x07\xb3\x3e\x69\xd4\x44\xcd\x13\x89\x62\x6b\x77\xcb\xf4\x23\xc4\xd8\x93\x33\xc7\x48\xa7\x41\x46\x35\xe0\x85\x95\x58\x9d\x39\xc5\xa0\x9d\x0b\x74\x8c\x9e\xea\xcb\x70\x0b\x91\xa3\x46\x4c\xf5\xe4\x31\x91\xbb\x5f\x6a\xec\xb6\x1e\xf6\x43\xc2\x19\x02\x2a\xd6\x9b\x98\x50\xa3\x1e\x02\x39\x93\x33\xdc\x3d\x2f\xf4\x65\x85\x30\xcf\xe6\x8f\x2e\xdc\x5e\xf1\x37\xfa\x3f\xf0\x29\xd2\xff\x72\xdf\x44\xfa\x6f\x6d\x22\x1c\x7d\x57\x13\x87\x41\x62\xf9\x54\x31\x5f\x2f\xf0\x71\x65\x45\x6e\xaa\x9c\x81\x38\x94\xc5\x7f\x05\x00\x00\xff\xff\xb8\xf4\xba\x98\x91\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 401, mode: os.FileMode(420), modTime: time.Unix(1586215562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x72\xa3\x4a\x0c\xc6\xd7\xf6\x29\x54\xda\x63\xde\xcb\x72\x06\xd8\xe5\x04\x73\x80\x29\x01\xc2\x74\xa6\xff\x30\xdd\x82\x8a\x8b\xca\xdd\xa7\xba\xdb\xc4\x38\xc9\x2a\xe5\x8d\x2d\x3e\xf1\xfd\x4a\x52\xab\x59\x57\xe8\x79\x50\x96\x01\x95\xed\xf9\x15\xe1\xed\xed\xb8\xae\x20\x6c\x26\x4d\x92\xe4\xee\xf7\xc8\xd4\x23\x9c\x62\xae\xd2\xca\xfe\x01\xcf\xba\xc6\x20\x17\xcd\x61\x64\x16\x04\xb9\x4c\x5c\xa3\xf0\xab\x94\x5d\x08\x08\xa3\xe7\xa1\xc6\x18\x97\x89\x7b\x4a\x6a\xd9\x7c\xc3\x3f\x69\xea\x78\x74\xba\x67\x7f\xa3\x84\xce\xab\x49\xf6\xb6\x17\x5a\x28\xab\x08\xc1\x77\x35\xee\x94\xf2\xcc\x4e\xe8\x7c\x32\x34\x85\xd3\x4b\xc0\xa6\x2a\x73\xe2\xdb\xa4\x8e\x0c\x7b\x7a\x0c\x6b\xdf\xe0\x23\x8b\x53\x56\xc9\x63\x80\x69\x6e\x8f\xc3\xed\x1b\xfe\x8a\xda\xab\x05\x3a\x4d\x21\xd4\xd8\x39\x2b\xa4\x2c\x7b\x6c\x8e\x47\x00\x80\xca\xd2\x02\x69\x73\x6a\x34\xe4\xcf\xca\x16\xe2\xa6\x1f\xff\x7b\x36\x3f\xaf\xcf\xad\x13\x71\x26\x4b\xd8\x64\x57\x69\x69\xd9\x08\x7b\x3c\xf9\x3e\x92\x0f\x1f\xc5\x22\xae\x3c\x7b\x88\x3d\x15\x5e\x9d\x47\x49\xaf\x45\xff\xba\x82\x1a\xe0\xf4\x6c\xa9\xd5\xfc\x8b\xc9\x77\x63\xbc\x18\x29\x57\x0d\xce\x9b\x8d\x13\xe3\x42\x59\xad\x2c\x63\x73\x3c\x1c\x2a\x65\xa7\x59\xee\xb2\xb1\x3d\xef\x34\x18\x5f\x04\x53\x3c\x6d\xf7\x20\x24\x2a\x82\x25\xc3\x35\xee\xc6\x55\xfc\x9d\xd9\x5f\x10\x54\xff\xa5\xbc\x93\x6a\x7c\xb6\xc2\x1e\x28\x8b\x09\x05\xe2\x20\xa3\x61\x70\x1e\x61\x21\x3d\x73\x8d\x08\xe4\x15\x15\x9a\xda\x78\x2b\x73\x47\x58\xa6\x8a\xdb\x59\xc4\xd9\xad\xe4\x56\x2c\x98\x4b\xf1\x14\x7f\x82\x29\xfe\x7b\x2f\x77\x6e\x8d\x12\x6c\xb2\xb5\x2a\xb3\xab\x39\xa4\x91\x44\x4c\xd9\xab\xa5\xb9\x4e\xa8\x8c\x8d\x6f\x0f\x71\xea\x1f\x7b\xf1\x1c\x66\x2d\x69\x23\x6e\xb6\x75\x05\xb6\x7d\x9a\xf3\x26\x5f\x0f\x2d\xda\x0d\x4d\x78\x77\x7a\xad\xeb\x2f\x37\xc0\xa7\xc3\x1d\x9c\x93\xb4\x52\xf7\x55\x0c\x4c\x32\x7b\xde\x19\xf3\x7f\xae\xfb\x3d\x3c\x5e\xe3\x4f\x9f\xc9\x88\xbd\x7e\x26\x6f\xf5\xfe\x0b\x00\x00\xff\xff\x74\x19\x5c\x70\x62\x05\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 1378, mode: os.FileMode(420), modTime: time.Unix(1586280779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

