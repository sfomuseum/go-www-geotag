// Code generated by go-bindata.
// sources:
// templates/html/editor.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlEditorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x41\x6f\x9b\x4c\x10\x3d\xe3\x5f\xb1\x9a\x3b\x26\xca\x77\x05\x6e\xf9\x2a\x55\x55\x53\x35\xaa\x7a\xac\x06\x18\xe2\x4d\x77\x17\xba\x3b\xb8\x75\xad\xfc\xf7\x6a\x59\x6c\xc0\x21\xaa\xe4\xd0\x8b\xb5\xcc\x78\xde\xbc\x79\xf3\x16\x71\x3c\x8a\x8a\x6a\x69\x48\x00\x55\x92\x1b\x0b\xe2\xf9\x79\x73\x3c\x0a\x26\xdd\x2a\x64\x12\x20\x4d\xf9\x6d\x47\x58\x81\xd8\xfa\x5c\xea\x4a\x2b\x5b\x16\x7c\x68\x29\x03\xa6\x5f\x9c\x3c\xe1\x1e\x43\x14\x84\xb3\x65\x06\x93\x48\xf2\x48\x0d\xe3\xe3\x56\x63\xeb\xb6\x4f\x0e\xf2\x34\x09\x89\xfc\x5a\xa4\x12\x35\x59\x5c\x15\x4b\x1a\xc9\xeb\x00\x06\x11\x17\x01\x95\x34\xdf\x85\x25\x95\x81\xe3\x83\x22\xb7\x23\x62\x98\xe2\x97\xce\x81\xd8\x59\xaa\x33\xf0\xe7\x64\xc0\xea\xc3\x49\xee\x97\x22\x6b\xb1\xbd\x33\x58\x28\xba\xbf\xd3\x05\x55\x6f\xd8\x47\x43\x1e\x60\x9d\xa1\x07\xac\x55\x86\x1e\xb0\x26\x43\x93\xa9\x06\x4f\x8e\xe3\x7f\x52\x58\xd2\xae\x51\x15\xd9\x37\x68\xd0\x8e\x28\xeb\x08\x31\x05\x5c\x45\x8d\x29\xe0\x5f\x24\xf9\x6a\x25\xbf\x49\x0d\x6c\xe5\x3a\x2a\xfc\xec\x99\xac\x8a\xb5\x8a\x98\x03\xd6\x4b\x1d\xd3\x4a\xee\x45\xa9\xd0\xb9\x0c\xca\xc6\x30\x4a\x43\x16\xf2\xcd\x46\x08\x21\x96\xaf\x9d\xcf\x84\xfc\xac\x18\x6d\xe5\xeb\xa2\xcb\x60\xec\x5f\xa0\x01\x33\xea\x8b\xea\xc6\xea\xd3\x1f\xfc\x39\x96\x46\x49\x43\x90\x6f\xa2\x28\x95\xa6\xed\x78\x96\xf5\xac\x6c\xa3\x84\xb6\xb1\xd3\xf1\xed\x69\x4c\x47\x68\xcb\x1d\x08\x83\x9a\x32\x08\x57\x27\xee\xac\x02\x21\xab\xf9\xf3\xc4\x48\x19\xdc\x19\xef\x14\x14\x5f\x3e\x7f\x10\xdc\x08\x4b\x6c\x25\xed\x09\xc4\x1e\x55\x47\x19\x80\x40\x2b\x31\x56\x58\x78\x75\xff\x27\xf6\x3d\x9c\xfc\x4d\x19\xfc\x77\xd3\x6b\x17\x45\x69\xd1\x31\x37\xe6\xc4\xb2\x60\x23\xf4\x21\xbe\xf5\x3f\x4e\xc7\x37\x67\x86\x5d\xa1\x25\xcf\xf8\xd4\x3d\x5e\xde\xc3\xa6\x49\x80\xc9\x07\x59\x12\x3f\x6d\xbe\x89\xd2\xa4\x92\xfb\x7c\x13\x0d\x4a\x4e\xaa\xa5\xc6\x47\x82\x99\xb6\x45\x53\x1d\xbc\x33\x42\xc9\x0b\xe9\xeb\xa6\x61\xb2\x33\x0a\x9a\x18\xcf\x15\xa1\xf1\xf9\x78\x5a\xfa\xe0\x8d\x73\xe8\xaa\x3d\xbf\x72\x43\xc3\xb0\x83\x82\x9e\x57\xb0\x66\xec\x70\x3f\xce\xe6\x25\x2d\xd8\xc4\xad\x95\x1a\xed\x01\xf2\x07\xdc\xd3\x85\x60\x23\xcf\xfe\x71\xa1\xe9\xc5\x9b\xf2\xdf\xb9\x6f\xe2\xb0\xf8\x47\x47\xf6\x10\x14\x5f\x08\x2f\x7a\xb1\x0f\xf6\x50\xde\x92\x01\x5a\xd4\xfe\x7b\x64\xd1\x94\x0f\xa1\xf7\x15\x56\xcc\x43\xe9\x6b\xce\x3b\xaf\xfa\x92\xbc\x25\xd7\x29\x76\xa3\xd1\x66\xfa\x0f\xf2\x2f\xf8\x56\x63\x7b\xbd\x5d\x3b\x6e\x3b\x86\x33\x2d\x62\x94\xca\xf5\x33\xbb\x4e\x7b\x57\xe4\xef\xa8\x79\xff\x70\xff\x31\x4d\x4e\x01\x9f\x3c\xf5\xae\x09\xb9\xb3\x34\xe7\x9c\x26\x23\xce\x2b\x57\x60\x38\xbf\xf8\x0c\xf4\xdc\x86\xcf\xc0\xd1\x79\x7f\x02\x00\x00\xff\xff\xf0\x24\x02\x14\x43\x0a\x00\x00")

func templatesHtmlEditorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlEditorHtml,
		"templates/html/editor.html",
	)
}

func templatesHtmlEditorHtml() (*asset, error) {
	bytes, err := templatesHtmlEditorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/editor.html", size: 2627, mode: os.FileMode(420), modTime: time.Unix(1586884661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x3f\x6f\xe3\x30\x0c\xc5\x77\x7f\x0a\x1e\xe7\x73\x8c\xdb\x6e\xb0\xbc\x05\x45\x81\x02\xed\xdc\xa5\x60\x24\x26\x56\x20\x8b\x86\xc5\x24\x4d\x0d\x7f\xf7\x42\x75\xdc\xa4\x7f\x26\x89\xef\xfd\x9e\x28\x0a\x1a\x47\x70\xbc\xf5\x91\x01\x7d\xb4\x2f\x2d\x93\x43\x98\xa6\xa2\xfe\xe3\xc4\xea\xb9\x67\x68\xb5\x0b\x4d\x51\xe7\x05\x02\xc5\x9d\x41\x8e\xd8\x14\x00\x75\x86\xf3\x06\xa0\xee\x58\x09\x6c\x4b\x43\x62\x35\x78\xd0\x6d\xf9\x1f\x2f\x96\x7a\x0d\xdc\xdc\xb1\x28\xed\xea\x6a\xae\x6e\x42\x91\x3a\x36\x78\xf4\x7c\xea\x65\x50\x04\x2b\x51\x39\xaa\xc1\x93\x77\xda\x1a\xc7\x47\x6f\xb9\xfc\x28\xfe\x82\x8f\x5e\x3d\x85\x32\x59\x0a\x6c\xfe\x2d\x2d\x92\x1d\x7c\xaf\x90\xaf\x6b\x50\xf9\x55\xab\x3d\x1d\x69\x56\x11\xd2\x60\x0d\xde\x28\xd5\xa9\x95\x24\x71\xeb\x87\xa4\xab\xc8\xba\xda\x27\x6c\xea\x6a\x36\x9b\x7c\x60\x1e\xae\x5a\xa6\xab\x37\xe2\xce\xe0\x48\xa9\x5c\xda\x07\x52\xaf\x07\xc7\x06\xc7\x11\x56\xf7\xb3\xfa\x70\x11\x61\x9a\xf0\x1b\x2e\x71\xf7\x0b\xbf\xa8\x3f\x03\x6f\x22\xdd\x17\xf6\x59\xa4\xbb\x62\x7d\x20\xcb\xad\x04\xc7\x43\xc9\xd1\xf5\xe2\xf3\x7b\x65\xfc\xe9\xea\xac\x2f\xc6\x35\x26\xdc\x6d\xd8\x7d\x26\xd2\x1c\x79\x5c\x67\x75\xa1\x53\xc6\x9b\x62\x1c\x81\xa3\xcb\xff\xe0\x3d\x00\x00\xff\xff\x2e\xf7\xe5\x06\x20\x02\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 544, mode: os.FileMode(420), modTime: time.Unix(1586471433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/editor.html": templatesHtmlEditorHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"editor.html": &bintree{templatesHtmlEditorHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

