// Code generated by go-bindata.
// sources:
// templates/html/editor.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlEditorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x41\x8f\x9b\x30\x10\x85\xcf\xf0\x2b\x46\xbe\x13\x56\xdb\x2b\x70\xdb\x9e\x2a\xb5\x6a\x55\xf5\x58\x0d\x30\x6c\xbc\xb5\x0d\xb5\x87\x74\x53\xb4\xff\xbd\x32\x26\x09\xec\xd2\x56\xcd\xd2\x4b\xe4\x8c\x33\x9f\xc7\xef\x3d\x11\x86\x01\x6a\x6a\xa4\x21\x10\x54\x4b\x6e\xad\x80\xa7\xa7\x78\x18\x80\x49\x77\x0a\x99\x40\x48\x53\x7d\xdd\x13\xd6\x02\x76\x7e\x2f\x53\xd2\x7c\x03\x4b\x2a\x17\x8e\x8f\x8a\xdc\x9e\x88\x05\xf0\xb1\xa3\x5c\x30\x3d\x72\x5a\x39\x27\x60\x6f\xa9\xc9\x85\x5f\xa7\xd2\xd4\xf4\xb8\x1b\xab\x69\x11\x67\xae\xb2\xb2\xe3\x79\xc3\x03\x1e\x30\x54\x05\x38\x5b\xe5\x62\x56\x49\xef\xa9\x65\xbc\xdf\x69\xec\xdc\xee\xc1\x89\x22\x4b\xc3\xc6\xd5\xa4\x0a\x35\x59\xdc\x94\x25\x8d\xe4\x6d\x80\xe3\x35\x57\x70\xc3\x00\xb2\x81\xdd\x9d\xc1\x52\xd1\xfb\x3b\x5d\x52\x3d\x9a\x71\xdd\x29\x2d\x79\xc0\x36\x13\x4f\xac\x35\x09\xfe\x39\x29\x13\xeb\x14\x95\x61\x00\x32\xf5\x14\xc8\xcb\xf5\x3f\x28\xac\x68\xdf\xaa\x9a\xec\x2b\x34\xe8\x2e\x94\x6d\x84\x98\x03\x37\x51\x63\x0e\xfc\x8b\x24\x5f\xac\xe4\x57\xa9\xf1\x63\x04\x6c\x23\xc4\xc4\x5a\x4f\xf1\x34\x7d\x56\xcb\x03\x54\x0a\x9d\xcb\x45\xd5\x1a\x46\x69\xc8\x8a\x22\x8e\x01\x00\xd6\xc3\xee\x77\xc2\xfe\xa2\x19\x6d\xed\xfb\xa2\xe7\xc5\xc4\x3f\xb3\x02\x33\x1a\x9b\x9a\xd6\xea\xd3\x0f\xfc\x3a\x91\x46\x49\x43\xa2\x88\xa3\x28\x93\xa6\xeb\x79\xb1\xeb\xa7\xb2\xad\x02\x6d\x13\xa7\x93\xdb\x93\x53\x8e\xd0\x56\x7b\x01\x06\x35\xe5\x22\x04\x36\xe9\xad\x12\x20\xeb\xe5\xf7\x99\x7d\xb9\xb8\x33\xde\x1f\x84\xcf\x1f\xdf\x01\xb7\x60\x89\xad\xa4\x03\x09\x38\xa0\xea\x29\x17\x02\xd0\x4a\x4c\x14\x96\x3e\x20\x6f\x89\xfd\x19\x4e\xfe\xa4\x5c\xbc\xb9\x19\x9d\x8f\xa2\xac\xec\x99\x5b\x73\x9a\xb2\x64\x03\xfa\x98\xdc\xfa\x0f\xa7\x93\x9b\xf3\x84\x7d\xa9\x25\x2f\xe6\x69\x46\x5e\x31\x62\xb3\x34\x60\x8a\x49\x96\xd4\xdf\xb6\x88\xa3\x2c\xad\xe5\xa1\x88\xa3\x49\xc9\x59\xb7\xd4\x78\x4f\x62\xa1\x6d\xd9\xd6\x47\x6f\x6c\x68\x79\x21\x7d\xd3\xb6\x4c\x76\x31\x82\x26\xc6\x73\x47\x38\xf8\xbc\x3c\x99\x3e\x65\xe3\x5c\xba\xca\xe7\x3f\x3d\x2a\xfe\x5f\x10\x66\x66\x27\xdf\x7b\xb2\xc7\x70\xf9\x95\xf2\x6a\x2c\xc6\xe2\x88\xf2\xe9\x08\x68\x68\xfc\xbf\xf1\x6a\x3e\x3e\x85\xb3\xaf\x48\x45\x11\x5a\x7f\x17\x82\xb3\xea\xcf\x87\xb7\xe4\x7a\xc5\xee\xe2\xf9\xd2\xb2\xb5\xf4\x68\xec\xae\x09\xcd\xf3\x29\x1a\x42\xee\x2d\xcd\x1a\xd7\x33\x34\xad\x5f\xbc\xba\x78\xec\xf4\xea\x72\x99\xf7\x57\x00\x00\x00\xff\xff\x62\xb3\x29\x47\xf7\x08\x00\x00")

func templatesHtmlEditorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlEditorHtml,
		"templates/html/editor.html",
	)
}

func templatesHtmlEditorHtml() (*asset, error) {
	bytes, err := templatesHtmlEditorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/editor.html", size: 2295, mode: os.FileMode(420), modTime: time.Unix(1586477086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586200144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x3f\x6f\xe3\x30\x0c\xc5\x77\x7f\x0a\x1e\xe7\x73\x8c\xdb\x6e\xb0\xbc\x05\x45\x81\x02\xed\xdc\xa5\x60\x24\x26\x56\x20\x8b\x86\xc5\x24\x4d\x0d\x7f\xf7\x42\x75\xdc\xa4\x7f\x26\x89\xef\xfd\x9e\x28\x0a\x1a\x47\x70\xbc\xf5\x91\x01\x7d\xb4\x2f\x2d\x93\x43\x98\xa6\xa2\xfe\xe3\xc4\xea\xb9\x67\x68\xb5\x0b\x4d\x51\xe7\x05\x02\xc5\x9d\x41\x8e\xd8\x14\x00\x75\x86\xf3\x06\xa0\xee\x58\x09\x6c\x4b\x43\x62\x35\x78\xd0\x6d\xf9\x1f\x2f\x96\x7a\x0d\xdc\xdc\xb1\x28\xed\xea\x6a\xae\x6e\x42\x91\x3a\x36\x78\xf4\x7c\xea\x65\x50\x04\x2b\x51\x39\xaa\xc1\x93\x77\xda\x1a\xc7\x47\x6f\xb9\xfc\x28\xfe\x82\x8f\x5e\x3d\x85\x32\x59\x0a\x6c\xfe\x2d\x2d\x92\x1d\x7c\xaf\x90\xaf\x6b\x50\xf9\x55\xab\x3d\x1d\x69\x56\x11\xd2\x60\x0d\xde\x28\xd5\xa9\x95\x24\x71\xeb\x87\xa4\xab\xc8\xba\xda\x27\x6c\xea\x6a\x36\x9b\x7c\x60\x1e\xae\x5a\xa6\xab\x37\xe2\xce\xe0\x48\xa9\x5c\xda\x07\x52\xaf\x07\xc7\x06\xc7\x11\x56\xf7\xb3\xfa\x70\x11\x61\x9a\xf0\x1b\x2e\x71\xf7\x0b\xbf\xa8\x3f\x03\x6f\x22\xdd\x17\xf6\x59\xa4\xbb\x62\x7d\x20\xcb\xad\x04\xc7\x43\xc9\xd1\xf5\xe2\xf3\x7b\x65\xfc\xe9\xea\xac\x2f\xc6\x35\x26\xdc\x6d\xd8\x7d\x26\xd2\x1c\x79\x5c\x67\x75\xa1\x53\xc6\x9b\x62\x1c\x81\xa3\xcb\xff\xe0\x3d\x00\x00\xff\xff\x2e\xf7\xe5\x06\x20\x02\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 544, mode: os.FileMode(420), modTime: time.Unix(1586471433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/editor.html": templatesHtmlEditorHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"editor.html": &bintree{templatesHtmlEditorHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

